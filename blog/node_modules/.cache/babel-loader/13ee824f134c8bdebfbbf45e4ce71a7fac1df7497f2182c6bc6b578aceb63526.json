{"ast":null,"code":"import axios from 'axios';\n// Local storage key for metadata items\nconst METADATA_STORAGE_KEY = 'nft_stored_metadata';\n\n// 하드코딩된 API 키\nconst FALLBACK_API_KEY = \"4f5eb1e973348c67f7db\";\nconst FALLBACK_API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  // 하드코딩된 API 키만 사용\n  return {\n    headers: {\n      pinata_api_key: FALLBACK_API_KEY,\n      pinata_secret_api_key: FALLBACK_API_SECRET\n    }\n  };\n};\n\n// Function to retrieve all stored metadata\nexport const getStoredMetadata = () => {\n  try {\n    const storedData = localStorage.getItem(METADATA_STORAGE_KEY);\n    if (!storedData) {\n      return [];\n    }\n    return JSON.parse(storedData);\n  } catch (error) {\n    console.error('Error retrieving stored metadata:', error);\n    return [];\n  }\n};\n\n// Function to save a new metadata item\nexport const saveStoredMetadata = metadata => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    existingMetadata.push(metadata);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(existingMetadata));\n  } catch (error) {\n    console.error('Error saving metadata:', error);\n    throw new Error('Failed to save metadata to local storage');\n  }\n};\n\n// Function to delete a metadata item by ID\nexport const deleteStoredMetadata = id => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    const updatedMetadata = existingMetadata.filter(item => item.id !== id);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(updatedMetadata));\n  } catch (error) {\n    console.error('Error deleting metadata:', error);\n    throw new Error('Failed to delete metadata from local storage');\n  }\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async file => {\n  try {\n    console.log('이미지 업로드 시작:', file.name);\n\n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n\n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n\n    // 하드코딩된 API 키로 직접 요청\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET,\n        'Content-Type': 'multipart/form-data'\n      },\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity\n    });\n    console.log('Pinata 응답:', response.data);\n\n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('이미지 업로드 에러 세부 정보:', error);\n\n    // 구체적인 에러 메시지 생성\n    let errorMessage = \"Unknown upload error\";\n    if (axios.isAxiosError(error)) {\n      // AxiosError 타입으로 처리\n      const axiosError = error;\n      if (axiosError.response) {\n        // 타입스크립트에 맞게 명시적 타입 변환\n        const responseData = axiosError.response.data;\n        errorMessage = (responseData === null || responseData === void 0 ? void 0 : responseData.error) || `Server error: ${axiosError.response.status}`;\n      } else if (axiosError.message) {\n        errorMessage = axiosError.message;\n      }\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      // 일반 Error 객체 처리\n      errorMessage = String(error.message);\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n\n    // 표준 Error 객체로 던지기\n    throw new Error(errorMessage);\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async metadata => {\n  try {\n    console.log('메타데이터 저장 시작:', metadata.name);\n\n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n\n    // 하드코딩된 API 키로 직접 요청\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinJSONToIPFS', data, {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET,\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('메타데이터 저장 응답:', response.data);\n\n    // If successful, return the IPFS URL and save to local storage\n    if (response.data && response.data.IpfsHash) {\n      const result = {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n\n      // Create a StoredMetadata object\n      const storedMetadata = {\n        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),\n        cid: response.data.IpfsHash,\n        url: result.url,\n        metadata: metadata,\n        createdAt: new Date().toISOString()\n      };\n\n      // Save to local storage\n      saveStoredMetadata(storedMetadata);\n      return result;\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('메타데이터 저장 에러 세부 정보:', error);\n\n    // 구체적인 에러 메시지 생성\n    let errorMessage = \"Unknown metadata storage error\";\n    if (axios.isAxiosError(error)) {\n      // AxiosError 타입으로 처리\n      const axiosError = error;\n      if (axiosError.response) {\n        // 타입스크립트에 맞게 명시적 타입 변환\n        const responseData = axiosError.response.data;\n        errorMessage = (responseData === null || responseData === void 0 ? void 0 : responseData.error) || `Server error: ${axiosError.response.status}`;\n      } else if (axiosError.message) {\n        errorMessage = axiosError.message;\n      }\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      // 일반 Error 객체 처리\n      errorMessage = String(error.message);\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n\n    // 표준 Error 객체로 던지기\n    throw new Error(errorMessage);\n  }\n};","map":{"version":3,"names":["axios","METADATA_STORAGE_KEY","FALLBACK_API_KEY","FALLBACK_API_SECRET","getPinataConfig","headers","pinata_api_key","pinata_secret_api_key","getStoredMetadata","storedData","localStorage","getItem","JSON","parse","error","console","saveStoredMetadata","metadata","existingMetadata","push","setItem","stringify","Error","deleteStoredMetadata","id","updatedMetadata","filter","item","uploadImageToPinata","file","log","name","formData","FormData","append","keyvalues","type","timestamp","Date","now","toString","pinataOptions","cidVersion","response","post","maxContentLength","Infinity","maxBodyLength","data","IpfsHash","url","ipfsHash","errorMessage","isAxiosError","axiosError","responseData","status","message","String","storeMetadataToPinata","pinataMetadata","pinataContent","result","storedMetadata","crypto","randomUUID","cid","createdAt","toISOString"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/services/nft.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { NFTMetadata, StoredMetadata } from '../types/nft';\n\n// Local storage key for metadata items\nconst METADATA_STORAGE_KEY = 'nft_stored_metadata';\n\n// 하드코딩된 API 키\nconst FALLBACK_API_KEY = \"4f5eb1e973348c67f7db\";\nconst FALLBACK_API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  // 하드코딩된 API 키만 사용\n  return {\n    headers: {\n      pinata_api_key: FALLBACK_API_KEY,\n      pinata_secret_api_key: FALLBACK_API_SECRET\n    }\n  };\n};\n\n// Function to retrieve all stored metadata\nexport const getStoredMetadata = (): StoredMetadata[] => {\n  try {\n    const storedData = localStorage.getItem(METADATA_STORAGE_KEY);\n    if (!storedData) {\n      return [];\n    }\n    \n    return JSON.parse(storedData) as StoredMetadata[];\n  } catch (error) {\n    console.error('Error retrieving stored metadata:', error);\n    return [];\n  }\n};\n\n// Function to save a new metadata item\nexport const saveStoredMetadata = (metadata: StoredMetadata): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    existingMetadata.push(metadata);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(existingMetadata));\n  } catch (error) {\n    console.error('Error saving metadata:', error);\n    throw new Error('Failed to save metadata to local storage');\n  }\n};\n\n// Function to delete a metadata item by ID\nexport const deleteStoredMetadata = (id: string): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    const updatedMetadata = existingMetadata.filter(item => item.id !== id);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(updatedMetadata));\n  } catch (error) {\n    console.error('Error deleting metadata:', error);\n    throw new Error('Failed to delete metadata from local storage');\n  }\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async (file: File) => {\n  try {\n    console.log('이미지 업로드 시작:', file.name);\n    \n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n    \n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n    \n    // 하드코딩된 API 키로 직접 요청\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinFileToIPFS',\n      formData,\n      {\n        headers: {\n          pinata_api_key: FALLBACK_API_KEY,\n          pinata_secret_api_key: FALLBACK_API_SECRET,\n          'Content-Type': 'multipart/form-data'\n        },\n        maxContentLength: Infinity as any,\n        maxBodyLength: Infinity as any\n      }\n    );\n    \n    console.log('Pinata 응답:', response.data);\n    \n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('이미지 업로드 에러 세부 정보:', error);\n    \n    // 구체적인 에러 메시지 생성\n    let errorMessage = \"Unknown upload error\";\n    \n    if (axios.isAxiosError(error)) {\n      // AxiosError 타입으로 처리\n      const axiosError = error as AxiosError;\n      if (axiosError.response) {\n        // 타입스크립트에 맞게 명시적 타입 변환\n        const responseData = axiosError.response.data as any;\n        errorMessage = responseData?.error || `Server error: ${axiosError.response.status}`;\n      } else if (axiosError.message) {\n        errorMessage = axiosError.message;\n      }\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      // 일반 Error 객체 처리\n      errorMessage = String(error.message);\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n    \n    // 표준 Error 객체로 던지기\n    throw new Error(errorMessage);\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async (metadata: NFTMetadata) => {\n  try {\n    console.log('메타데이터 저장 시작:', metadata.name);\n    \n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n    \n    // 하드코딩된 API 키로 직접 요청\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinJSONToIPFS',\n      data,\n      {\n        headers: {\n          pinata_api_key: FALLBACK_API_KEY,\n          pinata_secret_api_key: FALLBACK_API_SECRET,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('메타데이터 저장 응답:', response.data);\n    \n    // If successful, return the IPFS URL and save to local storage\n    if (response.data && response.data.IpfsHash) {\n      const result = {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n      \n      // Create a StoredMetadata object\n      const storedMetadata: StoredMetadata = {\n        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),\n        cid: response.data.IpfsHash,\n        url: result.url,\n        metadata: metadata,\n        createdAt: new Date().toISOString()\n      };\n      \n      // Save to local storage\n      saveStoredMetadata(storedMetadata);\n      \n      return result;\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('메타데이터 저장 에러 세부 정보:', error);\n    \n    // 구체적인 에러 메시지 생성\n    let errorMessage = \"Unknown metadata storage error\";\n    \n    if (axios.isAxiosError(error)) {\n      // AxiosError 타입으로 처리\n      const axiosError = error as AxiosError;\n      if (axiosError.response) {\n        // 타입스크립트에 맞게 명시적 타입 변환\n        const responseData = axiosError.response.data as any;\n        errorMessage = responseData?.error || `Server error: ${axiosError.response.status}`;\n      } else if (axiosError.message) {\n        errorMessage = axiosError.message;\n      }\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      // 일반 Error 객체 처리\n      errorMessage = String(error.message);\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n    \n    // 표준 Error 객체로 던지기\n    throw new Error(errorMessage);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}