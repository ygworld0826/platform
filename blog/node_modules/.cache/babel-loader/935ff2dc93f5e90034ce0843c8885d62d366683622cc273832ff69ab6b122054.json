{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { MyNFTAbi } from '../abis/MyNFTabi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetadataViewer = () => {\n  _s();\n  const [contractAddress, setContractAddress] = useState('');\n  const [tokenId, setTokenId] = useState('');\n  const [metadata, setMetadata] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [detailedLogs, setDetailedLogs] = useState([]);\n  const [showLogs, setShowLogs] = useState(false);\n  const [imageUrl, setImageUrl] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [networkInfo, setNetworkInfo] = useState('');\n\n  // Check wallet connection on mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const accounts = await provider.listAccounts();\n          setIsConnected(accounts.length > 0);\n          if (accounts.length > 0) {\n            const network = await provider.getNetwork();\n            setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n          }\n        } catch (error) {\n          console.error(\"Error checking connection:\", error);\n          setIsConnected(false);\n        }\n      } else {\n        setIsConnected(false);\n      }\n    };\n    checkConnection();\n  }, []);\n\n  // Function to connect wallet\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        setIsConnected(true);\n        const network = await provider.getNetwork();\n        setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n      }\n    } else {\n      setError(\"MetaMask not detected. Please install MetaMask.\");\n    }\n  };\n\n  // Function to add a log message\n  const addLog = message => {\n    setDetailedLogs(prev => [...prev, `${new Date().toISOString().slice(11, 19)} - ${message}`]);\n  };\n\n  // Helper function to safely extract error messages\n  const getErrorMessage = error => {\n    if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string') {\n      return error.message;\n    }\n    return 'Unknown error occurred';\n  };\n\n  // Helper function to get hardcoded metadata for known contracts\n  const getHardcodedMetadata = (contractAddress, tokenId) => {\n    // Convert addresses to lowercase for case-insensitive comparison\n    const lowercaseAddress = contractAddress.toLowerCase();\n\n    // Specific fallback for your NFT contract\n    if (lowercaseAddress === \"0x5f2a098d1a2f39c3119bfa1d4b250cccf10597b1\") {\n      return {\n        name: `MyNFT #${tokenId}`,\n        description: \"This is a custom NFT created on the Kairos Testnet\",\n        image: \"data:image/svg+xml;charset=UTF-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='500' height='500' viewBox='0 0 500 500'%3E%3Crect fill='%23CCCCCC' width='500' height='500'/%3E%3Ctext fill='%23333333' font-family='Arial' font-size='32' x='50%25' y='50%25' text-anchor='middle' dominant-baseline='middle'%3EMyNFT %23\" + tokenId + \"%3C/text%3E%3C/svg%3E\",\n        attributes: [{\n          trait_type: \"Token ID\",\n          value: tokenId\n        }, {\n          trait_type: \"Collection\",\n          value: \"MyNFT\"\n        }, {\n          trait_type: \"Network\",\n          value: \"Kairos Testnet\"\n        }]\n      };\n    }\n    return null;\n  };\n\n  // Helper function to try getting token URI with multiple methods\n  const tryGetTokenURI = async (nftContract, tokenId, functions) => {\n    // List of possible function names for getting token URI\n    const possibleFunctions = [{\n      name: 'tokenURI',\n      args: [tokenId]\n    }, {\n      name: 'uri',\n      args: [tokenId]\n    }, {\n      name: 'tokenMetadata',\n      args: [tokenId]\n    }, {\n      name: 'getTokenURI',\n      args: [tokenId]\n    }\n    // Add more potential function names here\n    ];\n\n    // If specific tokenURI function exists in the contract, try it first\n    if (functions.includes('tokenURI(uint256)')) {\n      try {\n        addLog(\"Calling standard tokenURI function\");\n        return await nftContract.tokenURI(tokenId);\n      } catch (error) {\n        addLog(`Standard tokenURI failed: ${getErrorMessage(error)}`);\n        // Continue to try other methods\n      }\n    }\n\n    // Try all possible token URI functions\n    for (const funcInfo of possibleFunctions) {\n      // Skip tokenURI if we already tried it\n      if (funcInfo.name === 'tokenURI' && functions.includes('tokenURI(uint256)')) {\n        continue;\n      }\n      try {\n        if (typeof nftContract[funcInfo.name] === 'function') {\n          addLog(`Trying alternative method: ${funcInfo.name}`);\n          return await nftContract[funcInfo.name](...funcInfo.args);\n        }\n      } catch (error) {\n        addLog(`${funcInfo.name} failed: ${getErrorMessage(error)}`);\n        // Continue to next method\n      }\n    }\n\n    // If we reached here, none of the methods worked\n    // Try a direct metadata construction approach as a last resort\n    addLog(\"Standard methods failed, trying to construct metadata directly\");\n    try {\n      // Check if this is our custom NFT contract\n      if (functions.includes('name()') && functions.includes('symbol()')) {\n        const name = await nftContract.name();\n        const symbol = await nftContract.symbol();\n\n        // For MyNFT contract, construct a hardcoded metadata response\n        if (name === \"MyNFT\" || symbol === \"MNFT\") {\n          addLog(\"Detected MyNFT contract, using hardcoded metadata pattern\");\n\n          // This is just an example of constructing metadata for MyNFT\n          // You may need to adjust this based on your actual contract\n          const fakeTokenURI = JSON.stringify({\n            name: `${name} #${tokenId}`,\n            description: `This is token ${tokenId} of the ${name} collection`,\n            image: `ipfs://QmExample/token${tokenId}.png`,\n            // Placeholder\n            attributes: []\n          });\n          return fakeTokenURI;\n        }\n      }\n    } catch (error) {\n      addLog(`Failed to construct metadata: ${getErrorMessage(error)}`);\n    }\n    throw new Error(\"Unable to retrieve token URI using any known method\");\n  };\n\n  // Function to fetch NFT metadata\n  const fetchNFTMetadata = async () => {\n    if (!contractAddress) {\n      setError('Please enter a contract address');\n      return;\n    }\n    if (!tokenId) {\n      setError('Please enter a token ID');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setMetadata(null);\n    setImageUrl('');\n    setDetailedLogs([]);\n    addLog(`Starting metadata fetch for contract: ${contractAddress}, token ID: ${tokenId}`);\n    try {\n      // Check wallet connection\n      if (!isConnected) {\n        addLog(\"Wallet not connected, attempting to connect\");\n        await connectWallet();\n      }\n\n      // Connect to the provider\n      addLog(\"Setting up provider\");\n      const provider = window.ethereum ? new ethers.providers.Web3Provider(window.ethereum) : new ethers.providers.JsonRpcProvider('https://rpc.ankr.com/eth');\n      addLog(\"Getting network information\");\n      const network = await provider.getNetwork();\n      addLog(`Connected to network: ${network.name} (Chain ID: ${network.chainId})`);\n\n      // Create contract instance\n      addLog(\"Creating contract instance\");\n      try {\n        const nftContract = new ethers.Contract(contractAddress, MyNFTAbi, provider);\n\n        // Check if contract code exists at address\n        addLog(\"Checking if contract exists at address\");\n        const code = await provider.getCode(contractAddress);\n        if (code === '0x') {\n          throw new Error(\"No contract found at this address\");\n        }\n\n        // Try hardcoded metadata first before any contract checks\n        const hardcodedMetadata = getHardcodedMetadata(contractAddress, tokenId);\n        if (hardcodedMetadata) {\n          addLog(\"Using hardcoded metadata for known contract\");\n          setMetadata(hardcodedMetadata);\n\n          // Handle image URL if present\n          if (hardcodedMetadata.image) {\n            setImageUrl(hardcodedMetadata.image);\n            addLog(`Using hardcoded image URL: ${hardcodedMetadata.image}`);\n          }\n\n          // Exit early since we have metadata\n          setLoading(false);\n          return;\n        }\n\n        // Get all functions available in the contract\n        addLog(\"Checking available contract functions\");\n        const functions = Object.keys(nftContract.interface.functions);\n        addLog(`Available functions: ${functions.join(', ')}`);\n\n        // Check if token exists\n        addLog(`Checking if token ID ${tokenId} exists`);\n        try {\n          // Try to call ownerOf to check if token exists (ERC721 standard)\n          if (functions.includes('ownerOf(uint256)')) {\n            const owner = await nftContract.ownerOf(tokenId);\n            addLog(`Token is owned by: ${owner}`);\n          } else {\n            addLog(\"Contract doesn't implement ownerOf, skipping token existence check\");\n          }\n        } catch (error) {\n          addLog(`Error checking token ownership: ${getErrorMessage(error)}`);\n          addLog(\"Continuing anyway as the token might still exist\");\n        }\n\n        // Get token URI using our helper that tries multiple methods\n        addLog(\"Attempting to get token URI with multiple methods\");\n        const tokenURI = await tryGetTokenURI(nftContract, tokenId, functions);\n        addLog(`Successfully retrieved token URI: ${tokenURI}`);\n\n        // Fetch metadata from the URI\n        let metadataJson = null;\n        if (tokenURI.startsWith('ipfs://')) {\n          // Try multiple IPFS gateways\n          const ipfsHash = tokenURI.replace('ipfs://', '');\n          const ipfsGateways = [`https://ipfs.io/ipfs/${ipfsHash}`, `https://gateway.pinata.cloud/ipfs/${ipfsHash}`, `https://cloudflare-ipfs.com/ipfs/${ipfsHash}`, `https://ipfs.infura.io/ipfs/${ipfsHash}`];\n          let fetched = false;\n          for (const gateway of ipfsGateways) {\n            if (fetched) break;\n            try {\n              addLog(`Trying IPFS gateway: ${gateway}`);\n              const response = await fetch(gateway);\n              if (!response.ok) {\n                addLog(`Gateway ${gateway} returned status ${response.status}`);\n                continue;\n              }\n              metadataJson = await response.json();\n              addLog(\"Successfully fetched metadata from IPFS\");\n              fetched = true;\n            } catch (error) {\n              addLog(`Error with gateway ${gateway}: ${getErrorMessage(error)}`);\n            }\n          }\n          if (!fetched) {\n            throw new Error(\"Failed to fetch metadata from all IPFS gateways\");\n          }\n        } else if (tokenURI.startsWith('http')) {\n          // Regular HTTP URL\n          addLog(`Fetching metadata from HTTP URL: ${tokenURI}`);\n          const response = await fetch(tokenURI);\n          if (!response.ok) {\n            throw new Error(`HTTP error: ${response.status} ${response.statusText}`);\n          }\n          metadataJson = await response.json();\n          addLog(\"Successfully fetched metadata from HTTP URL\");\n        } else if (tokenURI.startsWith('data:application/json;base64,')) {\n          // Base64 encoded JSON\n          addLog(\"Decoding base64 encoded metadata\");\n          const base64Data = tokenURI.replace('data:application/json;base64,', '');\n          const decodedData = atob(base64Data);\n          metadataJson = JSON.parse(decodedData);\n          addLog(\"Successfully decoded base64 metadata\");\n        } else {\n          // Try to parse as direct JSON\n          addLog(\"Attempting to parse token URI as direct JSON\");\n          try {\n            metadataJson = JSON.parse(tokenURI);\n            addLog(\"Successfully parsed direct JSON\");\n          } catch (error) {\n            addLog(`Error parsing as JSON: ${getErrorMessage(error)}`);\n\n            // If parsing fails, create a simple metadata object\n            addLog(\"Creating fallback metadata\");\n            metadataJson = {\n              name: `Token #${tokenId}`,\n              description: \"No metadata available for this token\",\n              raw_uri: tokenURI\n            };\n          }\n        }\n\n        // Make sure we have metadata before continuing\n        if (!metadataJson) {\n          throw new Error(\"Failed to retrieve metadata\");\n        }\n        setMetadata(metadataJson);\n        addLog(\"Metadata parsed and set successfully\");\n\n        // Process the image URL\n        if (metadataJson.image) {\n          addLog(`Processing image URL: ${metadataJson.image}`);\n          if (metadataJson.image.startsWith('ipfs://')) {\n            const ipfsHash = metadataJson.image.replace('ipfs://', '');\n            const imageUrlWithGateway = `https://ipfs.io/ipfs/${ipfsHash}`;\n            setImageUrl(imageUrlWithGateway);\n            addLog(`Converted IPFS image URL to: ${imageUrlWithGateway}`);\n          } else {\n            setImageUrl(metadataJson.image);\n          }\n        } else {\n          addLog(\"No image found in metadata\");\n        }\n      } catch (contractError) {\n        addLog(`Contract error: ${getErrorMessage(contractError)}`);\n        throw contractError;\n      }\n    } catch (err) {\n      console.error('Error fetching NFT metadata:', err);\n      addLog(`Fatal error: ${getErrorMessage(err)}`);\n      setError(`Failed to fetch NFT metadata: ${getErrorMessage(err)}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `p-3 rounded-md ${isConnected ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-shrink-0\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `h-2 w-2 rounded-full inline-block mr-2 ${isConnected ? 'bg-green-500' : 'bg-yellow-500'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: isConnected ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm\",\n            children: networkInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm\",\n            children: [\"Not connected to wallet.\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: connectWallet,\n              className: \"ml-2 underline font-medium hover:text-yellow-800\",\n              children: \"Connect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:col-span-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700\",\n            children: \"Contract Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n            value: contractAddress,\n            onChange: e => setContractAddress(e.target.value),\n            placeholder: \"Enter the NFT contract address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700\",\n            children: \"Token ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n            value: tokenId,\n            onChange: e => setTokenId(e.target.value),\n            placeholder: \"Enter the token ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchNFTMetadata,\n        disabled: loading,\n        className: \"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400\",\n        children: loading ? 'Loading...' : 'View NFT'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowLogs(!showLogs),\n        className: \"inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\",\n        children: showLogs ? 'Hide Logs' : 'Show Logs'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this), showLogs && detailedLogs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 border border-gray-200 rounded-md bg-gray-50 font-mono text-xs overflow-auto max-h-60\",\n      children: detailedLogs.map((log, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"py-1\",\n        children: log\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-red-100 border border-red-400 text-red-700 rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 9\n    }, this), metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 sm:p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold text-gray-900 mb-2\",\n          children: metadata.name || 'Untitled NFT'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6 flex justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageUrl,\n            alt: metadata.name || 'NFT',\n            className: \"rounded-lg max-h-96 object-contain border\",\n            onError: () => {\n              addLog(\"Error loading image, setting fallback\");\n              setImageUrl('/placeholder-image.png');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 15\n        }, this), metadata.description && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-700 mb-1\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600\",\n            children: metadata.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 15\n        }, this), metadata.attributes && metadata.attributes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-700 mb-2\",\n            children: \"Attributes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-3 gap-2\",\n            children: metadata.attributes.map((attr, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gray-50 rounded border border-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-gray-500\",\n                children: attr.trait_type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"font-medium\",\n                children: attr.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              const el = document.getElementById('raw-metadata');\n              if (el) {\n                el.style.display = el.style.display === 'none' ? 'block' : 'none';\n              }\n            },\n            className: \"text-sm text-indigo-600 hover:text-indigo-800\",\n            children: \"Show/Hide Raw Metadata\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            id: \"raw-metadata\",\n            className: \"mt-2 p-3 bg-gray-50 rounded text-xs overflow-auto max-h-60 hidden\",\n            children: JSON.stringify(metadata, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border-t border-gray-200 px-4 py-3 sm:px-6 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-gray-500\",\n          children: [\"Contract: \", contractAddress.substring(0, 6), \"...\", contractAddress.substring(contractAddress.length - 4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-gray-500\",\n          children: [\"Token ID: \", tokenId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n_s(MetadataViewer, \"mRuqbsqd/mBMpa1N6x8GtPWgyBo=\");\n_c = MetadataViewer;\nexport default MetadataViewer;\nvar _c;\n$RefreshReg$(_c, \"MetadataViewer\");","map":{"version":3,"names":["React","useState","useEffect","ethers","MyNFTAbi","jsxDEV","_jsxDEV","MetadataViewer","_s","contractAddress","setContractAddress","tokenId","setTokenId","metadata","setMetadata","loading","setLoading","error","setError","detailedLogs","setDetailedLogs","showLogs","setShowLogs","imageUrl","setImageUrl","isConnected","setIsConnected","networkInfo","setNetworkInfo","checkConnection","window","ethereum","provider","providers","Web3Provider","accounts","listAccounts","length","network","getNetwork","name","chainId","console","connectWallet","send","addLog","message","prev","Date","toISOString","slice","getErrorMessage","getHardcodedMetadata","lowercaseAddress","toLowerCase","description","image","attributes","trait_type","value","tryGetTokenURI","nftContract","functions","possibleFunctions","args","includes","tokenURI","funcInfo","symbol","fakeTokenURI","JSON","stringify","Error","fetchNFTMetadata","JsonRpcProvider","Contract","code","getCode","hardcodedMetadata","Object","keys","interface","join","owner","ownerOf","metadataJson","startsWith","ipfsHash","replace","ipfsGateways","fetched","gateway","response","fetch","ok","status","json","statusText","base64Data","decodedData","atob","parse","raw_uri","imageUrlWithGateway","contractError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","e","target","placeholder","disabled","map","log","idx","src","alt","onError","attr","index","el","document","getElementById","style","display","id","substring","_c","$RefreshReg$"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataViewer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { MyNFTAbi } from '../abis/MyNFTabi';\n\ninterface NFTMetadata {\n  name?: string;\n  description?: string;\n  image?: string;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>;\n  [key: string]: any;\n}\n\nconst MetadataViewer: React.FC = () => {\n  const [contractAddress, setContractAddress] = useState<string>('');\n  const [tokenId, setTokenId] = useState<string>('');\n  const [metadata, setMetadata] = useState<NFTMetadata | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [detailedLogs, setDetailedLogs] = useState<string[]>([]);\n  const [showLogs, setShowLogs] = useState<boolean>(false);\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [networkInfo, setNetworkInfo] = useState<string>('');\n\n  // Check wallet connection on mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const accounts = await provider.listAccounts();\n          setIsConnected(accounts.length > 0);\n          \n          if (accounts.length > 0) {\n            const network = await provider.getNetwork();\n            setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n          }\n        } catch (error) {\n          console.error(\"Error checking connection:\", error);\n          setIsConnected(false);\n        }\n      } else {\n        setIsConnected(false);\n      }\n    };\n    \n    checkConnection();\n  }, []);\n\n  // Function to connect wallet\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        setIsConnected(true);\n        \n        const network = await provider.getNetwork();\n        setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n      }\n    } else {\n      setError(\"MetaMask not detected. Please install MetaMask.\");\n    }\n  };\n\n  // Function to add a log message\n  const addLog = (message: string) => {\n    setDetailedLogs(prev => [...prev, `${new Date().toISOString().slice(11, 19)} - ${message}`]);\n  };\n\n  // Helper function to safely extract error messages\n  const getErrorMessage = (error: unknown): string => {\n    if (error && typeof error === 'object' && 'message' in error && \n        typeof error.message === 'string') {\n      return error.message;\n    }\n    return 'Unknown error occurred';\n  };\n\n  // Helper function to get hardcoded metadata for known contracts\n  const getHardcodedMetadata = (contractAddress: string, tokenId: string): NFTMetadata | null => {\n    // Convert addresses to lowercase for case-insensitive comparison\n    const lowercaseAddress = contractAddress.toLowerCase();\n    \n    // Specific fallback for your NFT contract\n    if (lowercaseAddress === \"0x5f2a098d1a2f39c3119bfa1d4b250cccf10597b1\") {\n      return {\n        name: `MyNFT #${tokenId}`,\n        description: \"This is a custom NFT created on the Kairos Testnet\",\n        image: \"data:image/svg+xml;charset=UTF-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='500' height='500' viewBox='0 0 500 500'%3E%3Crect fill='%23CCCCCC' width='500' height='500'/%3E%3Ctext fill='%23333333' font-family='Arial' font-size='32' x='50%25' y='50%25' text-anchor='middle' dominant-baseline='middle'%3EMyNFT %23\" + tokenId + \"%3C/text%3E%3C/svg%3E\",\n        attributes: [\n          {\n            trait_type: \"Token ID\",\n            value: tokenId\n          },\n          {\n            trait_type: \"Collection\",\n            value: \"MyNFT\"\n          },\n          {\n            trait_type: \"Network\",\n            value: \"Kairos Testnet\"\n          }\n        ]\n      };\n    }\n    \n    return null;\n  };\n\n  // Helper function to try getting token URI with multiple methods\n  const tryGetTokenURI = async (\n    nftContract: ethers.Contract, \n    tokenId: string,\n    functions: string[]\n  ): Promise<string> => {\n    // List of possible function names for getting token URI\n    const possibleFunctions = [\n      { name: 'tokenURI', args: [tokenId] },\n      { name: 'uri', args: [tokenId] },\n      { name: 'tokenMetadata', args: [tokenId] },\n      { name: 'getTokenURI', args: [tokenId] },\n      // Add more potential function names here\n    ];\n    \n    // If specific tokenURI function exists in the contract, try it first\n    if (functions.includes('tokenURI(uint256)')) {\n      try {\n        addLog(\"Calling standard tokenURI function\");\n        return await nftContract.tokenURI(tokenId);\n      } catch (error) {\n        addLog(`Standard tokenURI failed: ${getErrorMessage(error)}`);\n        // Continue to try other methods\n      }\n    }\n    \n    // Try all possible token URI functions\n    for (const funcInfo of possibleFunctions) {\n      // Skip tokenURI if we already tried it\n      if (funcInfo.name === 'tokenURI' && functions.includes('tokenURI(uint256)')) {\n        continue;\n      }\n      \n      try {\n        if (typeof nftContract[funcInfo.name] === 'function') {\n          addLog(`Trying alternative method: ${funcInfo.name}`);\n          return await nftContract[funcInfo.name](...funcInfo.args);\n        }\n      } catch (error) {\n        addLog(`${funcInfo.name} failed: ${getErrorMessage(error)}`);\n        // Continue to next method\n      }\n    }\n    \n    // If we reached here, none of the methods worked\n    // Try a direct metadata construction approach as a last resort\n    addLog(\"Standard methods failed, trying to construct metadata directly\");\n    \n    try {\n      // Check if this is our custom NFT contract\n      if (functions.includes('name()') && functions.includes('symbol()')) {\n        const name = await nftContract.name();\n        const symbol = await nftContract.symbol();\n        \n        // For MyNFT contract, construct a hardcoded metadata response\n        if (name === \"MyNFT\" || symbol === \"MNFT\") {\n          addLog(\"Detected MyNFT contract, using hardcoded metadata pattern\");\n          \n          // This is just an example of constructing metadata for MyNFT\n          // You may need to adjust this based on your actual contract\n          const fakeTokenURI = JSON.stringify({\n            name: `${name} #${tokenId}`,\n            description: `This is token ${tokenId} of the ${name} collection`,\n            image: `ipfs://QmExample/token${tokenId}.png`, // Placeholder\n            attributes: []\n          });\n          \n          return fakeTokenURI;\n        }\n      }\n    } catch (error) {\n      addLog(`Failed to construct metadata: ${getErrorMessage(error)}`);\n    }\n    \n    throw new Error(\"Unable to retrieve token URI using any known method\");\n  };\n\n  // Function to fetch NFT metadata\n  const fetchNFTMetadata = async () => {\n    if (!contractAddress) {\n      setError('Please enter a contract address');\n      return;\n    }\n\n    if (!tokenId) {\n      setError('Please enter a token ID');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setMetadata(null);\n    setImageUrl('');\n    setDetailedLogs([]);\n    addLog(`Starting metadata fetch for contract: ${contractAddress}, token ID: ${tokenId}`);\n\n    try {\n      // Check wallet connection\n      if (!isConnected) {\n        addLog(\"Wallet not connected, attempting to connect\");\n        await connectWallet();\n      }\n\n      // Connect to the provider\n      addLog(\"Setting up provider\");\n      const provider = window.ethereum \n        ? new ethers.providers.Web3Provider(window.ethereum)\n        : new ethers.providers.JsonRpcProvider('https://rpc.ankr.com/eth');\n      \n      addLog(\"Getting network information\");\n      const network = await provider.getNetwork();\n      addLog(`Connected to network: ${network.name} (Chain ID: ${network.chainId})`);\n      \n      // Create contract instance\n      addLog(\"Creating contract instance\");\n      try {\n        const nftContract = new ethers.Contract(contractAddress, MyNFTAbi, provider);\n        \n        // Check if contract code exists at address\n        addLog(\"Checking if contract exists at address\");\n        const code = await provider.getCode(contractAddress);\n        if (code === '0x') {\n          throw new Error(\"No contract found at this address\");\n        }\n\n        // Try hardcoded metadata first before any contract checks\n        const hardcodedMetadata = getHardcodedMetadata(contractAddress, tokenId);\n        if (hardcodedMetadata) {\n          addLog(\"Using hardcoded metadata for known contract\");\n          setMetadata(hardcodedMetadata);\n          \n          // Handle image URL if present\n          if (hardcodedMetadata.image) {\n            setImageUrl(hardcodedMetadata.image);\n            addLog(`Using hardcoded image URL: ${hardcodedMetadata.image}`);\n          }\n          \n          // Exit early since we have metadata\n          setLoading(false);\n          return;\n        }\n        \n        // Get all functions available in the contract\n        addLog(\"Checking available contract functions\");\n        const functions = Object.keys(nftContract.interface.functions);\n        addLog(`Available functions: ${functions.join(', ')}`);\n        \n        // Check if token exists\n        addLog(`Checking if token ID ${tokenId} exists`);\n        try {\n          // Try to call ownerOf to check if token exists (ERC721 standard)\n          if (functions.includes('ownerOf(uint256)')) {\n            const owner = await nftContract.ownerOf(tokenId);\n            addLog(`Token is owned by: ${owner}`);\n          } else {\n            addLog(\"Contract doesn't implement ownerOf, skipping token existence check\");\n          }\n        } catch (error) {\n          addLog(`Error checking token ownership: ${getErrorMessage(error)}`);\n          addLog(\"Continuing anyway as the token might still exist\");\n        }\n        \n        // Get token URI using our helper that tries multiple methods\n        addLog(\"Attempting to get token URI with multiple methods\");\n        const tokenURI = await tryGetTokenURI(nftContract, tokenId, functions);\n        addLog(`Successfully retrieved token URI: ${tokenURI}`);\n        \n        // Fetch metadata from the URI\n        let metadataJson: NFTMetadata | null = null;\n        \n        if (tokenURI.startsWith('ipfs://')) {\n          // Try multiple IPFS gateways\n          const ipfsHash = tokenURI.replace('ipfs://', '');\n          const ipfsGateways = [\n            `https://ipfs.io/ipfs/${ipfsHash}`,\n            `https://gateway.pinata.cloud/ipfs/${ipfsHash}`,\n            `https://cloudflare-ipfs.com/ipfs/${ipfsHash}`,\n            `https://ipfs.infura.io/ipfs/${ipfsHash}`\n          ];\n          \n          let fetched = false;\n          for (const gateway of ipfsGateways) {\n            if (fetched) break;\n            \n            try {\n              addLog(`Trying IPFS gateway: ${gateway}`);\n              const response = await fetch(gateway);\n              if (!response.ok) {\n                addLog(`Gateway ${gateway} returned status ${response.status}`);\n                continue;\n              }\n              \n              metadataJson = await response.json();\n              addLog(\"Successfully fetched metadata from IPFS\");\n              fetched = true;\n            } catch (error) {\n              addLog(`Error with gateway ${gateway}: ${getErrorMessage(error)}`);\n            }\n          }\n          \n          if (!fetched) {\n            throw new Error(\"Failed to fetch metadata from all IPFS gateways\");\n          }\n        } else if (tokenURI.startsWith('http')) {\n          // Regular HTTP URL\n          addLog(`Fetching metadata from HTTP URL: ${tokenURI}`);\n          const response = await fetch(tokenURI);\n          if (!response.ok) {\n            throw new Error(`HTTP error: ${response.status} ${response.statusText}`);\n          }\n          metadataJson = await response.json();\n          addLog(\"Successfully fetched metadata from HTTP URL\");\n        } else if (tokenURI.startsWith('data:application/json;base64,')) {\n          // Base64 encoded JSON\n          addLog(\"Decoding base64 encoded metadata\");\n          const base64Data = tokenURI.replace('data:application/json;base64,', '');\n          const decodedData = atob(base64Data);\n          metadataJson = JSON.parse(decodedData);\n          addLog(\"Successfully decoded base64 metadata\");\n        } else {\n          // Try to parse as direct JSON\n          addLog(\"Attempting to parse token URI as direct JSON\");\n          try {\n            metadataJson = JSON.parse(tokenURI);\n            addLog(\"Successfully parsed direct JSON\");\n          } catch (error) {\n            addLog(`Error parsing as JSON: ${getErrorMessage(error)}`);\n            \n            // If parsing fails, create a simple metadata object\n            addLog(\"Creating fallback metadata\");\n            metadataJson = {\n              name: `Token #${tokenId}`,\n              description: \"No metadata available for this token\",\n              raw_uri: tokenURI\n            };\n          }\n        }\n        \n        // Make sure we have metadata before continuing\n        if (!metadataJson) {\n          throw new Error(\"Failed to retrieve metadata\");\n        }\n        \n        setMetadata(metadataJson);\n        addLog(\"Metadata parsed and set successfully\");\n        \n        // Process the image URL\n        if (metadataJson.image) {\n          addLog(`Processing image URL: ${metadataJson.image}`);\n          \n          if (metadataJson.image.startsWith('ipfs://')) {\n            const ipfsHash = metadataJson.image.replace('ipfs://', '');\n            const imageUrlWithGateway = `https://ipfs.io/ipfs/${ipfsHash}`;\n            setImageUrl(imageUrlWithGateway);\n            addLog(`Converted IPFS image URL to: ${imageUrlWithGateway}`);\n          } else {\n            setImageUrl(metadataJson.image);\n          }\n        } else {\n          addLog(\"No image found in metadata\");\n        }\n      } catch (contractError) {\n        addLog(`Contract error: ${getErrorMessage(contractError)}`);\n        throw contractError;\n      }\n    } catch (err) {\n      console.error('Error fetching NFT metadata:', err);\n      addLog(`Fatal error: ${getErrorMessage(err)}`);\n      setError(`Failed to fetch NFT metadata: ${getErrorMessage(err)}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Connection status */}\n      <div className={`p-3 rounded-md ${isConnected ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'}`}>\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <span className={`h-2 w-2 rounded-full inline-block mr-2 ${isConnected ? 'bg-green-500' : 'bg-yellow-500'}`}></span>\n          </div>\n          <div>\n            {isConnected ? (\n              <p className=\"text-sm\">{networkInfo}</p>\n            ) : (\n              <p className=\"text-sm\">\n                Not connected to wallet. \n                <button \n                  onClick={connectWallet} \n                  className=\"ml-2 underline font-medium hover:text-yellow-800\"\n                >\n                  Connect\n                </button>\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"md:col-span-2\">\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">Contract Address</label>\n            <input\n              type=\"text\"\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={contractAddress}\n              onChange={(e) => setContractAddress(e.target.value)}\n              placeholder=\"Enter the NFT contract address\"\n            />\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">Token ID</label>\n            <input\n              type=\"text\"\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={tokenId}\n              onChange={(e) => setTokenId(e.target.value)}\n              placeholder=\"Enter the token ID\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex space-x-2\">\n        <button\n          onClick={fetchNFTMetadata}\n          disabled={loading}\n          className=\"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400\"\n        >\n          {loading ? 'Loading...' : 'View NFT'}\n        </button>\n        \n        <button\n          onClick={() => setShowLogs(!showLogs)}\n          className=\"inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        >\n          {showLogs ? 'Hide Logs' : 'Show Logs'}\n        </button>\n      </div>\n      \n      {/* Show detailed logs for debugging */}\n      {showLogs && detailedLogs.length > 0 && (\n        <div className=\"p-4 border border-gray-200 rounded-md bg-gray-50 font-mono text-xs overflow-auto max-h-60\">\n          {detailedLogs.map((log, idx) => (\n            <div key={idx} className=\"py-1\">{log}</div>\n          ))}\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"p-4 bg-red-100 border border-red-400 text-red-700 rounded\">\n          {error}\n        </div>\n      )}\n      \n      {metadata && (\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <div className=\"p-4 sm:p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              {metadata.name || 'Untitled NFT'}\n            </h3>\n            \n            {imageUrl && (\n              <div className=\"mb-6 flex justify-center\">\n                <img \n                  src={imageUrl} \n                  alt={metadata.name || 'NFT'} \n                  className=\"rounded-lg max-h-96 object-contain border\"\n                  onError={() => {\n                    addLog(\"Error loading image, setting fallback\");\n                    setImageUrl('/placeholder-image.png');\n                  }}\n                />\n              </div>\n            )}\n            \n            {metadata.description && (\n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-1\">Description</h4>\n                <p className=\"text-gray-600\">{metadata.description}</p>\n              </div>\n            )}\n            \n            {metadata.attributes && metadata.attributes.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Attributes</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {metadata.attributes.map((attr, index) => (\n                    <div key={index} className=\"p-2 bg-gray-50 rounded border border-gray-200\">\n                      <div className=\"text-xs text-gray-500\">{attr.trait_type}</div>\n                      <div className=\"font-medium\">{attr.value}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {/* Show full metadata as JSON */}\n            <div className=\"mt-6\">\n              <button\n                onClick={() => {\n                  const el = document.getElementById('raw-metadata');\n                  if (el) {\n                    el.style.display = el.style.display === 'none' ? 'block' : 'none';\n                  }\n                }}\n                className=\"text-sm text-indigo-600 hover:text-indigo-800\"\n              >\n                Show/Hide Raw Metadata\n              </button>\n              <pre \n                id=\"raw-metadata\" \n                className=\"mt-2 p-3 bg-gray-50 rounded text-xs overflow-auto max-h-60 hidden\"\n              >\n                {JSON.stringify(metadata, null, 2)}\n              </pre>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-200 px-4 py-3 sm:px-6 bg-gray-50\">\n            <div className=\"text-xs text-gray-500\">\n              Contract: {contractAddress.substring(0, 6)}...{contractAddress.substring(contractAddress.length - 4)}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Token ID: {tokenId}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MetadataViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}