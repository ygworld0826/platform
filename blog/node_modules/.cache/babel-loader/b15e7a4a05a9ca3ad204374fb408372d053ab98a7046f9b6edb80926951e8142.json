{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { MyNFTAbi } from '../abis/MyNFTabi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetadataViewer = () => {\n  _s();\n  const [contractAddress, setContractAddress] = useState('');\n  const [tokenId, setTokenId] = useState('');\n  const [metadata, setMetadata] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [detailedLogs, setDetailedLogs] = useState([]);\n  const [showLogs, setShowLogs] = useState(false);\n  const [imageUrl, setImageUrl] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [networkInfo, setNetworkInfo] = useState('');\n\n  // Check wallet connection on mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const accounts = await provider.listAccounts();\n          setIsConnected(accounts.length > 0);\n          if (accounts.length > 0) {\n            const network = await provider.getNetwork();\n            setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n          }\n        } catch (error) {\n          console.error(\"Error checking connection:\", error);\n          setIsConnected(false);\n        }\n      } else {\n        setIsConnected(false);\n      }\n    };\n    checkConnection();\n  }, []);\n\n  // Function to connect wallet\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        setIsConnected(true);\n        const network = await provider.getNetwork();\n        setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n      }\n    } else {\n      setError(\"MetaMask not detected. Please install MetaMask.\");\n    }\n  };\n\n  // Function to add a log message\n  const addLog = message => {\n    setDetailedLogs(prev => [...prev, `${new Date().toISOString().slice(11, 19)} - ${message}`]);\n  };\n\n  // Function to fetch NFT metadata\n  const fetchNFTMetadata = async () => {\n    if (!contractAddress) {\n      setError('Please enter a contract address');\n      return;\n    }\n    if (!tokenId) {\n      setError('Please enter a token ID');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setMetadata(null);\n    setImageUrl('');\n    setDetailedLogs([]);\n    addLog(`Starting metadata fetch for contract: ${contractAddress}, token ID: ${tokenId}`);\n    try {\n      // Check wallet connection\n      if (!isConnected) {\n        addLog(\"Wallet not connected, attempting to connect\");\n        await connectWallet();\n      }\n\n      // Connect to the provider\n      addLog(\"Setting up provider\");\n      const provider = window.ethereum ? new ethers.providers.Web3Provider(window.ethereum) : new ethers.providers.JsonRpcProvider('https://rpc.ankr.com/eth');\n      addLog(\"Getting network information\");\n      const network = await provider.getNetwork();\n      addLog(`Connected to network: ${network.name} (Chain ID: ${network.chainId})`);\n\n      // Create contract instance\n      addLog(\"Creating contract instance\");\n      try {\n        const nftContract = new ethers.Contract(contractAddress, MyNFTAbi, provider);\n\n        // Check if contract code exists at address\n        addLog(\"Checking if contract exists at address\");\n        const code = await provider.getCode(contractAddress);\n        if (code === '0x') {\n          throw new Error(\"No contract found at this address\");\n        }\n\n        // Verify contract has tokenURI function\n        addLog(\"Checking if contract implements tokenURI function\");\n        const functions = Object.keys(nftContract.interface.functions);\n        if (!functions.includes('tokenURI(uint256)')) {\n          addLog(\"WARNING: Contract may not implement tokenURI function\");\n        }\n\n        // Check if token exists\n        addLog(`Checking if token ID ${tokenId} exists`);\n        try {\n          // Try to call ownerOf to check if token exists (ERC721 standard)\n          if (functions.includes('ownerOf(uint256)')) {\n            const owner = await nftContract.ownerOf(tokenId);\n            addLog(`Token is owned by: ${owner}`);\n          }\n        } catch (error) {\n          addLog(`Error checking token ownership: ${error.message}`);\n          throw new Error(`Token ID ${tokenId} may not exist in this contract`);\n        }\n\n        // Get token URI\n        addLog(\"Calling tokenURI function\");\n        const tokenURI = await nftContract.tokenURI(tokenId);\n        addLog(`Token URI: ${tokenURI}`);\n\n        // Fetch metadata from the URI\n        let metadataJson;\n        if (tokenURI.startsWith('ipfs://')) {\n          // Try multiple IPFS gateways\n          const ipfsHash = tokenURI.replace('ipfs://', '');\n          const ipfsGateways = [`https://ipfs.io/ipfs/${ipfsHash}`, `https://gateway.pinata.cloud/ipfs/${ipfsHash}`, `https://cloudflare-ipfs.com/ipfs/${ipfsHash}`, `https://ipfs.infura.io/ipfs/${ipfsHash}`];\n          let fetched = false;\n          for (const gateway of ipfsGateways) {\n            if (fetched) break;\n            try {\n              addLog(`Trying IPFS gateway: ${gateway}`);\n              const response = await fetch(gateway);\n              if (!response.ok) {\n                addLog(`Gateway ${gateway} returned status ${response.status}`);\n                continue;\n              }\n              metadataJson = await response.json();\n              addLog(\"Successfully fetched metadata from IPFS\");\n              fetched = true;\n            } catch (error) {\n              addLog(`Error with gateway ${gateway}: ${error.message}`);\n            }\n          }\n          if (!fetched) {\n            throw new Error(\"Failed to fetch metadata from all IPFS gateways\");\n          }\n        } else if (tokenURI.startsWith('http')) {\n          // Regular HTTP URL\n          addLog(`Fetching metadata from HTTP URL: ${tokenURI}`);\n          const response = await fetch(tokenURI);\n          if (!response.ok) {\n            throw new Error(`HTTP error: ${response.status} ${response.statusText}`);\n          }\n          metadataJson = await response.json();\n          addLog(\"Successfully fetched metadata from HTTP URL\");\n        } else if (tokenURI.startsWith('data:application/json;base64,')) {\n          // Base64 encoded JSON\n          addLog(\"Decoding base64 encoded metadata\");\n          const base64Data = tokenURI.replace('data:application/json;base64,', '');\n          const decodedData = atob(base64Data);\n          metadataJson = JSON.parse(decodedData);\n          addLog(\"Successfully decoded base64 metadata\");\n        } else {\n          // Try to parse as direct JSON\n          addLog(\"Attempting to parse token URI as direct JSON\");\n          try {\n            metadataJson = JSON.parse(tokenURI);\n            addLog(\"Successfully parsed direct JSON\");\n          } catch (error) {\n            addLog(`Error parsing as JSON: ${error.message}`);\n            throw new Error(\"Unsupported token URI format\");\n          }\n        }\n        setMetadata(metadataJson);\n        addLog(\"Metadata parsed and set successfully\");\n\n        // Process the image URL\n        if (metadataJson.image) {\n          addLog(`Processing image URL: ${metadataJson.image}`);\n          if (metadataJson.image.startsWith('ipfs://')) {\n            const ipfsHash = metadataJson.image.replace('ipfs://', '');\n            const imageUrlWithGateway = `https://ipfs.io/ipfs/${ipfsHash}`;\n            setImageUrl(imageUrlWithGateway);\n            addLog(`Converted IPFS image URL to: ${imageUrlWithGateway}`);\n          } else {\n            setImageUrl(metadataJson.image);\n          }\n        } else {\n          addLog(\"No image found in metadata\");\n        }\n      } catch (contractError) {\n        addLog(`Contract error: ${contractError.message}`);\n        throw contractError;\n      }\n    } catch (err) {\n      console.error('Error fetching NFT metadata:', err);\n      addLog(`Fatal error: ${err.message}`);\n      setError(`Failed to fetch NFT metadata: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `p-3 rounded-md ${isConnected ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-shrink-0\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `h-2 w-2 rounded-full inline-block mr-2 ${isConnected ? 'bg-green-500' : 'bg-yellow-500'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: isConnected ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm\",\n            children: networkInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm\",\n            children: [\"Not connected to wallet.\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: connectWallet,\n              className: \"ml-2 underline font-medium hover:text-yellow-800\",\n              children: \"Connect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:col-span-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700\",\n            children: \"Contract Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n            value: contractAddress,\n            onChange: e => setContractAddress(e.target.value),\n            placeholder: \"Enter the NFT contract address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700\",\n            children: \"Token ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n            value: tokenId,\n            onChange: e => setTokenId(e.target.value),\n            placeholder: \"Enter the token ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchNFTMetadata,\n        disabled: loading,\n        className: \"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400\",\n        children: loading ? 'Loading...' : 'View NFT'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowLogs(!showLogs),\n        className: \"inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\",\n        children: showLogs ? 'Hide Logs' : 'Show Logs'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), showLogs && detailedLogs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 border border-gray-200 rounded-md bg-gray-50 font-mono text-xs overflow-auto max-h-60\",\n      children: detailedLogs.map((log, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"py-1\",\n        children: log\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-red-100 border border-red-400 text-red-700 rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }, this), metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 sm:p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold text-gray-900 mb-2\",\n          children: metadata.name || 'Untitled NFT'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6 flex justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageUrl,\n            alt: metadata.name || 'NFT',\n            className: \"rounded-lg max-h-96 object-contain border\",\n            onError: () => {\n              addLog(\"Error loading image, setting fallback\");\n              setImageUrl('/placeholder-image.png');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }, this), metadata.description && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-700 mb-1\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600\",\n            children: metadata.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this), metadata.attributes && metadata.attributes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-700 mb-2\",\n            children: \"Attributes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-3 gap-2\",\n            children: metadata.attributes.map((attr, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gray-50 rounded border border-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-gray-500\",\n                children: attr.trait_type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"font-medium\",\n                children: attr.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              const el = document.getElementById('raw-metadata');\n              if (el) {\n                el.style.display = el.style.display === 'none' ? 'block' : 'none';\n              }\n            },\n            className: \"text-sm text-indigo-600 hover:text-indigo-800\",\n            children: \"Show/Hide Raw Metadata\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            id: \"raw-metadata\",\n            className: \"mt-2 p-3 bg-gray-50 rounded text-xs overflow-auto max-h-60 hidden\",\n            children: JSON.stringify(metadata, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border-t border-gray-200 px-4 py-3 sm:px-6 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-gray-500\",\n          children: [\"Contract: \", contractAddress.substring(0, 6), \"...\", contractAddress.substring(contractAddress.length - 4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-gray-500\",\n          children: [\"Token ID: \", tokenId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n_s(MetadataViewer, \"mRuqbsqd/mBMpa1N6x8GtPWgyBo=\");\n_c = MetadataViewer;\nexport default MetadataViewer;\nvar _c;\n$RefreshReg$(_c, \"MetadataViewer\");","map":{"version":3,"names":["React","useState","useEffect","ethers","MyNFTAbi","jsxDEV","_jsxDEV","MetadataViewer","_s","contractAddress","setContractAddress","tokenId","setTokenId","metadata","setMetadata","loading","setLoading","error","setError","detailedLogs","setDetailedLogs","showLogs","setShowLogs","imageUrl","setImageUrl","isConnected","setIsConnected","networkInfo","setNetworkInfo","checkConnection","window","ethereum","provider","providers","Web3Provider","accounts","listAccounts","length","network","getNetwork","name","chainId","console","connectWallet","send","addLog","message","prev","Date","toISOString","slice","fetchNFTMetadata","JsonRpcProvider","nftContract","Contract","code","getCode","Error","functions","Object","keys","interface","includes","owner","ownerOf","tokenURI","metadataJson","startsWith","ipfsHash","replace","ipfsGateways","fetched","gateway","response","fetch","ok","status","json","statusText","base64Data","decodedData","atob","JSON","parse","image","imageUrlWithGateway","contractError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","disabled","map","log","idx","src","alt","onError","description","attributes","attr","index","trait_type","el","document","getElementById","style","display","id","stringify","substring","_c","$RefreshReg$"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataViewer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { MyNFTAbi } from '../abis/MyNFTabi';\n\ninterface NFTMetadata {\n  name?: string;\n  description?: string;\n  image?: string;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>;\n  [key: string]: any;\n}\n\nconst MetadataViewer: React.FC = () => {\n  const [contractAddress, setContractAddress] = useState<string>('');\n  const [tokenId, setTokenId] = useState<string>('');\n  const [metadata, setMetadata] = useState<NFTMetadata | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [detailedLogs, setDetailedLogs] = useState<string[]>([]);\n  const [showLogs, setShowLogs] = useState<boolean>(false);\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [networkInfo, setNetworkInfo] = useState<string>('');\n\n  // Check wallet connection on mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const accounts = await provider.listAccounts();\n          setIsConnected(accounts.length > 0);\n          \n          if (accounts.length > 0) {\n            const network = await provider.getNetwork();\n            setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n          }\n        } catch (error) {\n          console.error(\"Error checking connection:\", error);\n          setIsConnected(false);\n        }\n      } else {\n        setIsConnected(false);\n      }\n    };\n    \n    checkConnection();\n  }, []);\n\n  // Function to connect wallet\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        setIsConnected(true);\n        \n        const network = await provider.getNetwork();\n        setNetworkInfo(`Connected to ${network.name} (Chain ID: ${network.chainId})`);\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n      }\n    } else {\n      setError(\"MetaMask not detected. Please install MetaMask.\");\n    }\n  };\n\n  // Function to add a log message\n  const addLog = (message: string) => {\n    setDetailedLogs(prev => [...prev, `${new Date().toISOString().slice(11, 19)} - ${message}`]);\n  };\n\n  // Function to fetch NFT metadata\n  const fetchNFTMetadata = async () => {\n    if (!contractAddress) {\n      setError('Please enter a contract address');\n      return;\n    }\n\n    if (!tokenId) {\n      setError('Please enter a token ID');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setMetadata(null);\n    setImageUrl('');\n    setDetailedLogs([]);\n    addLog(`Starting metadata fetch for contract: ${contractAddress}, token ID: ${tokenId}`);\n\n    try {\n      // Check wallet connection\n      if (!isConnected) {\n        addLog(\"Wallet not connected, attempting to connect\");\n        await connectWallet();\n      }\n\n      // Connect to the provider\n      addLog(\"Setting up provider\");\n      const provider = window.ethereum \n        ? new ethers.providers.Web3Provider(window.ethereum)\n        : new ethers.providers.JsonRpcProvider('https://rpc.ankr.com/eth');\n      \n      addLog(\"Getting network information\");\n      const network = await provider.getNetwork();\n      addLog(`Connected to network: ${network.name} (Chain ID: ${network.chainId})`);\n      \n      // Create contract instance\n      addLog(\"Creating contract instance\");\n      try {\n        const nftContract = new ethers.Contract(contractAddress, MyNFTAbi, provider);\n        \n        // Check if contract code exists at address\n        addLog(\"Checking if contract exists at address\");\n        const code = await provider.getCode(contractAddress);\n        if (code === '0x') {\n          throw new Error(\"No contract found at this address\");\n        }\n        \n        // Verify contract has tokenURI function\n        addLog(\"Checking if contract implements tokenURI function\");\n        const functions = Object.keys(nftContract.interface.functions);\n        if (!functions.includes('tokenURI(uint256)')) {\n          addLog(\"WARNING: Contract may not implement tokenURI function\");\n        }\n        \n        // Check if token exists\n        addLog(`Checking if token ID ${tokenId} exists`);\n        try {\n          // Try to call ownerOf to check if token exists (ERC721 standard)\n          if (functions.includes('ownerOf(uint256)')) {\n            const owner = await nftContract.ownerOf(tokenId);\n            addLog(`Token is owned by: ${owner}`);\n          }\n        } catch (error) {\n          addLog(`Error checking token ownership: ${error.message}`);\n          throw new Error(`Token ID ${tokenId} may not exist in this contract`);\n        }\n        \n        // Get token URI\n        addLog(\"Calling tokenURI function\");\n        const tokenURI = await nftContract.tokenURI(tokenId);\n        addLog(`Token URI: ${tokenURI}`);\n        \n        // Fetch metadata from the URI\n        let metadataJson: NFTMetadata;\n        \n        if (tokenURI.startsWith('ipfs://')) {\n          // Try multiple IPFS gateways\n          const ipfsHash = tokenURI.replace('ipfs://', '');\n          const ipfsGateways = [\n            `https://ipfs.io/ipfs/${ipfsHash}`,\n            `https://gateway.pinata.cloud/ipfs/${ipfsHash}`,\n            `https://cloudflare-ipfs.com/ipfs/${ipfsHash}`,\n            `https://ipfs.infura.io/ipfs/${ipfsHash}`\n          ];\n          \n          let fetched = false;\n          for (const gateway of ipfsGateways) {\n            if (fetched) break;\n            \n            try {\n              addLog(`Trying IPFS gateway: ${gateway}`);\n              const response = await fetch(gateway);\n              if (!response.ok) {\n                addLog(`Gateway ${gateway} returned status ${response.status}`);\n                continue;\n              }\n              \n              metadataJson = await response.json();\n              addLog(\"Successfully fetched metadata from IPFS\");\n              fetched = true;\n            } catch (error) {\n              addLog(`Error with gateway ${gateway}: ${error.message}`);\n            }\n          }\n          \n          if (!fetched) {\n            throw new Error(\"Failed to fetch metadata from all IPFS gateways\");\n          }\n        } else if (tokenURI.startsWith('http')) {\n          // Regular HTTP URL\n          addLog(`Fetching metadata from HTTP URL: ${tokenURI}`);\n          const response = await fetch(tokenURI);\n          if (!response.ok) {\n            throw new Error(`HTTP error: ${response.status} ${response.statusText}`);\n          }\n          metadataJson = await response.json();\n          addLog(\"Successfully fetched metadata from HTTP URL\");\n        } else if (tokenURI.startsWith('data:application/json;base64,')) {\n          // Base64 encoded JSON\n          addLog(\"Decoding base64 encoded metadata\");\n          const base64Data = tokenURI.replace('data:application/json;base64,', '');\n          const decodedData = atob(base64Data);\n          metadataJson = JSON.parse(decodedData);\n          addLog(\"Successfully decoded base64 metadata\");\n        } else {\n          // Try to parse as direct JSON\n          addLog(\"Attempting to parse token URI as direct JSON\");\n          try {\n            metadataJson = JSON.parse(tokenURI);\n            addLog(\"Successfully parsed direct JSON\");\n          } catch (error) {\n            addLog(`Error parsing as JSON: ${error.message}`);\n            throw new Error(\"Unsupported token URI format\");\n          }\n        }\n        \n        setMetadata(metadataJson);\n        addLog(\"Metadata parsed and set successfully\");\n        \n        // Process the image URL\n        if (metadataJson.image) {\n          addLog(`Processing image URL: ${metadataJson.image}`);\n          \n          if (metadataJson.image.startsWith('ipfs://')) {\n            const ipfsHash = metadataJson.image.replace('ipfs://', '');\n            const imageUrlWithGateway = `https://ipfs.io/ipfs/${ipfsHash}`;\n            setImageUrl(imageUrlWithGateway);\n            addLog(`Converted IPFS image URL to: ${imageUrlWithGateway}`);\n          } else {\n            setImageUrl(metadataJson.image);\n          }\n        } else {\n          addLog(\"No image found in metadata\");\n        }\n      } catch (contractError) {\n        addLog(`Contract error: ${contractError.message}`);\n        throw contractError;\n      }\n    } catch (err) {\n      console.error('Error fetching NFT metadata:', err);\n      addLog(`Fatal error: ${err.message}`);\n      setError(`Failed to fetch NFT metadata: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Connection status */}\n      <div className={`p-3 rounded-md ${isConnected ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'}`}>\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <span className={`h-2 w-2 rounded-full inline-block mr-2 ${isConnected ? 'bg-green-500' : 'bg-yellow-500'}`}></span>\n          </div>\n          <div>\n            {isConnected ? (\n              <p className=\"text-sm\">{networkInfo}</p>\n            ) : (\n              <p className=\"text-sm\">\n                Not connected to wallet. \n                <button \n                  onClick={connectWallet} \n                  className=\"ml-2 underline font-medium hover:text-yellow-800\"\n                >\n                  Connect\n                </button>\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"md:col-span-2\">\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">Contract Address</label>\n            <input\n              type=\"text\"\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={contractAddress}\n              onChange={(e) => setContractAddress(e.target.value)}\n              placeholder=\"Enter the NFT contract address\"\n            />\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">Token ID</label>\n            <input\n              type=\"text\"\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={tokenId}\n              onChange={(e) => setTokenId(e.target.value)}\n              placeholder=\"Enter the token ID\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex space-x-2\">\n        <button\n          onClick={fetchNFTMetadata}\n          disabled={loading}\n          className=\"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400\"\n        >\n          {loading ? 'Loading...' : 'View NFT'}\n        </button>\n        \n        <button\n          onClick={() => setShowLogs(!showLogs)}\n          className=\"inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        >\n          {showLogs ? 'Hide Logs' : 'Show Logs'}\n        </button>\n      </div>\n      \n      {/* Show detailed logs for debugging */}\n      {showLogs && detailedLogs.length > 0 && (\n        <div className=\"p-4 border border-gray-200 rounded-md bg-gray-50 font-mono text-xs overflow-auto max-h-60\">\n          {detailedLogs.map((log, idx) => (\n            <div key={idx} className=\"py-1\">{log}</div>\n          ))}\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"p-4 bg-red-100 border border-red-400 text-red-700 rounded\">\n          {error}\n        </div>\n      )}\n      \n      {metadata && (\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <div className=\"p-4 sm:p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              {metadata.name || 'Untitled NFT'}\n            </h3>\n            \n            {imageUrl && (\n              <div className=\"mb-6 flex justify-center\">\n                <img \n                  src={imageUrl} \n                  alt={metadata.name || 'NFT'} \n                  className=\"rounded-lg max-h-96 object-contain border\"\n                  onError={() => {\n                    addLog(\"Error loading image, setting fallback\");\n                    setImageUrl('/placeholder-image.png');\n                  }}\n                />\n              </div>\n            )}\n            \n            {metadata.description && (\n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-1\">Description</h4>\n                <p className=\"text-gray-600\">{metadata.description}</p>\n              </div>\n            )}\n            \n            {metadata.attributes && metadata.attributes.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Attributes</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {metadata.attributes.map((attr, index) => (\n                    <div key={index} className=\"p-2 bg-gray-50 rounded border border-gray-200\">\n                      <div className=\"text-xs text-gray-500\">{attr.trait_type}</div>\n                      <div className=\"font-medium\">{attr.value}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {/* Show full metadata as JSON */}\n            <div className=\"mt-6\">\n              <button\n                onClick={() => {\n                  const el = document.getElementById('raw-metadata');\n                  if (el) {\n                    el.style.display = el.style.display === 'none' ? 'block' : 'none';\n                  }\n                }}\n                className=\"text-sm text-indigo-600 hover:text-indigo-800\"\n              >\n                Show/Hide Raw Metadata\n              </button>\n              <pre \n                id=\"raw-metadata\" \n                className=\"mt-2 p-3 bg-gray-50 rounded text-xs overflow-auto max-h-60 hidden\"\n              >\n                {JSON.stringify(metadata, null, 2)}\n              </pre>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-200 px-4 py-3 sm:px-6 bg-gray-50\">\n            <div className=\"text-xs text-gray-500\">\n              Contract: {contractAddress.substring(0, 6)}...{contractAddress.substring(contractAddress.length - 4)}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Token ID: {tokenId}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MetadataViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}