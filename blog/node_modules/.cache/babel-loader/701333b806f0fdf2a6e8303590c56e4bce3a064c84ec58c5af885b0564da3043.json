{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { MyNFTAbi } from '../abis/MyNFTabi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTViewer = ({\n  contractAddress: initialContractAddress,\n  tokenId: initialTokenId\n}) => {\n  _s();\n  const [contractAddress, setContractAddress] = useState(initialContractAddress || '');\n  const [tokenId, setTokenId] = useState((initialTokenId === null || initialTokenId === void 0 ? void 0 : initialTokenId.toString()) || '');\n  const [metadata, setMetadata] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [imageUrl, setImageUrl] = useState('');\n\n  // Function to fetch NFT metadata\n  const fetchNFTMetadata = async () => {\n    if (!contractAddress || !tokenId) {\n      setError('Please provide both contract address and token ID');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setMetadata(null);\n    setImageUrl('');\n    try {\n      // Connect to the provider (use window.ethereum if available, otherwise use a public provider)\n      const provider = window.ethereum ? new ethers.providers.Web3Provider(window.ethereum) : new ethers.providers.JsonRpcProvider('https://rpc.ankr.com/eth');\n\n      // Create contract instance\n      const nftContract = new ethers.Contract(contractAddress, MyNFTAbi, provider);\n\n      // Get token URI\n      const tokenURI = await nftContract.tokenURI(tokenId);\n      console.log('Token URI:', tokenURI);\n\n      // Fetch metadata from the URI\n      let metadataJson;\n      if (tokenURI.startsWith('ipfs://')) {\n        // Convert IPFS URI to HTTPS using a gateway\n        const ipfsHash = tokenURI.replace('ipfs://', '');\n        const metadataUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n        const response = await fetch(metadataUrl);\n        metadataJson = await response.json();\n      } else if (tokenURI.startsWith('http')) {\n        // Regular HTTP URL\n        const response = await fetch(tokenURI);\n        metadataJson = await response.json();\n      } else {\n        // If it's base64 encoded or other format, try to parse it\n        const decoded = JSON.parse(tokenURI);\n        metadataJson = decoded;\n      }\n      setMetadata(metadataJson);\n\n      // Process the image URL\n      if (metadataJson.image) {\n        if (metadataJson.image.startsWith('ipfs://')) {\n          const ipfsHash = metadataJson.image.replace('ipfs://', '');\n          setImageUrl(`https://ipfs.io/ipfs/${ipfsHash}`);\n        } else {\n          setImageUrl(metadataJson.image);\n        }\n      }\n    } catch (err) {\n      console.error('Error fetching NFT metadata:', err);\n      setError('Failed to fetch NFT metadata. Please check the contract address and token ID.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto fetch if both contract address and token ID are provided on component mount\n  useEffect(() => {\n    if (initialContractAddress && initialTokenId !== undefined) {\n      fetchNFTMetadata();\n    }\n  }, [initialContractAddress, initialTokenId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:col-span-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700\",\n            children: \"Contract Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n            value: contractAddress,\n            onChange: e => setContractAddress(e.target.value),\n            placeholder: \"Enter the NFT contract address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700\",\n            children: \"Token ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n            value: tokenId,\n            onChange: e => setTokenId(e.target.value),\n            placeholder: \"Enter the token ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchNFTMetadata,\n      disabled: loading,\n      className: \"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400\",\n      children: loading ? 'Loading...' : 'View NFT'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-red-100 border border-red-400 text-red-700 rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 sm:p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold text-gray-900 mb-2\",\n          children: metadata.name || 'Untitled NFT'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6 flex justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageUrl,\n            alt: metadata.name || 'NFT',\n            className: \"rounded-lg max-h-96 object-contain border\",\n            onError: () => setImageUrl('/placeholder-image.png')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this), metadata.description && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-700 mb-1\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600\",\n            children: metadata.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, this), metadata.attributes && metadata.attributes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-700 mb-2\",\n            children: \"Attributes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-3 gap-2\",\n            children: metadata.attributes.map((attr, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gray-50 rounded border border-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-gray-500\",\n                children: attr.trait_type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"font-medium\",\n                children: attr.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border-t border-gray-200 px-4 py-3 sm:px-6 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-gray-500\",\n          children: [\"Contract: \", contractAddress.substring(0, 6), \"...\", contractAddress.substring(contractAddress.length - 4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-gray-500\",\n          children: [\"Token ID: \", tokenId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(NFTViewer, \"jXPOCPom4Q6O90qYRFqS2v8AT6A=\");\n_c = NFTViewer;\nexport default NFTViewer;\nvar _c;\n$RefreshReg$(_c, \"NFTViewer\");","map":{"version":3,"names":["React","useState","useEffect","ethers","MyNFTAbi","jsxDEV","_jsxDEV","NFTViewer","contractAddress","initialContractAddress","tokenId","initialTokenId","_s","setContractAddress","setTokenId","toString","metadata","setMetadata","loading","setLoading","error","setError","imageUrl","setImageUrl","fetchNFTMetadata","provider","window","ethereum","providers","Web3Provider","JsonRpcProvider","nftContract","Contract","tokenURI","console","log","metadataJson","startsWith","ipfsHash","replace","metadataUrl","response","fetch","json","decoded","JSON","parse","image","err","undefined","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","disabled","name","src","alt","onError","description","attributes","length","map","attr","index","trait_type","substring","_c","$RefreshReg$"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataViewer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { MyNFTAbi } from '../abis/MyNFTabi';\n\ninterface NFTViewerProps {\n  contractAddress?: string;\n  tokenId?: number;\n}\n\ninterface NFTMetadata {\n  name?: string;\n  description?: string;\n  image?: string;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>;\n  [key: string]: any;\n}\n\nconst NFTViewer: React.FC<NFTViewerProps> = ({ contractAddress: initialContractAddress, tokenId: initialTokenId }) => {\n  const [contractAddress, setContractAddress] = useState<string>(initialContractAddress || '');\n  const [tokenId, setTokenId] = useState<string>(initialTokenId?.toString() || '');\n  const [metadata, setMetadata] = useState<NFTMetadata | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [imageUrl, setImageUrl] = useState<string>('');\n\n  // Function to fetch NFT metadata\n  const fetchNFTMetadata = async () => {\n    if (!contractAddress || !tokenId) {\n      setError('Please provide both contract address and token ID');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setMetadata(null);\n    setImageUrl('');\n\n    try {\n      // Connect to the provider (use window.ethereum if available, otherwise use a public provider)\n      const provider = window.ethereum \n        ? new ethers.providers.Web3Provider(window.ethereum)\n        : new ethers.providers.JsonRpcProvider('https://rpc.ankr.com/eth');\n      \n      // Create contract instance\n      const nftContract = new ethers.Contract(contractAddress, MyNFTAbi, provider);\n      \n      // Get token URI\n      const tokenURI = await nftContract.tokenURI(tokenId);\n      console.log('Token URI:', tokenURI);\n      \n      // Fetch metadata from the URI\n      let metadataJson: NFTMetadata;\n      \n      if (tokenURI.startsWith('ipfs://')) {\n        // Convert IPFS URI to HTTPS using a gateway\n        const ipfsHash = tokenURI.replace('ipfs://', '');\n        const metadataUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n        const response = await fetch(metadataUrl);\n        metadataJson = await response.json();\n      } else if (tokenURI.startsWith('http')) {\n        // Regular HTTP URL\n        const response = await fetch(tokenURI);\n        metadataJson = await response.json();\n      } else {\n        // If it's base64 encoded or other format, try to parse it\n        const decoded = JSON.parse(tokenURI);\n        metadataJson = decoded;\n      }\n      \n      setMetadata(metadataJson);\n      \n      // Process the image URL\n      if (metadataJson.image) {\n        if (metadataJson.image.startsWith('ipfs://')) {\n          const ipfsHash = metadataJson.image.replace('ipfs://', '');\n          setImageUrl(`https://ipfs.io/ipfs/${ipfsHash}`);\n        } else {\n          setImageUrl(metadataJson.image);\n        }\n      }\n      \n    } catch (err) {\n      console.error('Error fetching NFT metadata:', err);\n      setError('Failed to fetch NFT metadata. Please check the contract address and token ID.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto fetch if both contract address and token ID are provided on component mount\n  useEffect(() => {\n    if (initialContractAddress && initialTokenId !== undefined) {\n      fetchNFTMetadata();\n    }\n  }, [initialContractAddress, initialTokenId]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"md:col-span-2\">\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">Contract Address</label>\n            <input\n              type=\"text\"\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={contractAddress}\n              onChange={(e) => setContractAddress(e.target.value)}\n              placeholder=\"Enter the NFT contract address\"\n            />\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">Token ID</label>\n            <input\n              type=\"text\"\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={tokenId}\n              onChange={(e) => setTokenId(e.target.value)}\n              placeholder=\"Enter the token ID\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <button\n        onClick={fetchNFTMetadata}\n        disabled={loading}\n        className=\"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400\"\n      >\n        {loading ? 'Loading...' : 'View NFT'}\n      </button>\n      \n      {error && (\n        <div className=\"p-4 bg-red-100 border border-red-400 text-red-700 rounded\">\n          {error}\n        </div>\n      )}\n      \n      {metadata && (\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <div className=\"p-4 sm:p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              {metadata.name || 'Untitled NFT'}\n            </h3>\n            \n            {imageUrl && (\n              <div className=\"mb-6 flex justify-center\">\n                <img \n                  src={imageUrl} \n                  alt={metadata.name || 'NFT'} \n                  className=\"rounded-lg max-h-96 object-contain border\"\n                  onError={() => setImageUrl('/placeholder-image.png')}\n                />\n              </div>\n            )}\n            \n            {metadata.description && (\n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-1\">Description</h4>\n                <p className=\"text-gray-600\">{metadata.description}</p>\n              </div>\n            )}\n            \n            {metadata.attributes && metadata.attributes.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Attributes</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {metadata.attributes.map((attr, index) => (\n                    <div key={index} className=\"p-2 bg-gray-50 rounded border border-gray-200\">\n                      <div className=\"text-xs text-gray-500\">{attr.trait_type}</div>\n                      <div className=\"font-medium\">{attr.value}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"border-t border-gray-200 px-4 py-3 sm:px-6 bg-gray-50\">\n            <div className=\"text-xs text-gray-500\">\n              Contract: {contractAddress.substring(0, 6)}...{contractAddress.substring(contractAddress.length - 4)}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Token ID: {tokenId}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NFTViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}