{"ast":null,"code":"// Notes management service\n// Interface for a note\n// Storage key for notes\nconst NOTES_STORAGE_KEY='platform_notes';// Get all notes\nexport const getAllNotes=()=>{try{const notesData=localStorage.getItem(NOTES_STORAGE_KEY);if(!notesData)return[];return JSON.parse(notesData);}catch(error){console.error('Error retrieving notes from localStorage:',error);return[];}};// Save all notes\nexport const saveAllNotes=notes=>{try{localStorage.setItem(NOTES_STORAGE_KEY,JSON.stringify(notes));}catch(error){console.error('Error saving notes to localStorage:',error);}};// Get a specific note\nexport const getNote=(moduleId,lectureId)=>{const notes=getAllNotes();return notes.find(note=>note.moduleId===moduleId&&note.lectureId===lectureId);};// Save or update a note\nexport const saveNote=(moduleId,lectureId,content)=>{const notes=getAllNotes();const now=new Date().toISOString();// Check if the note already exists\nconst existingNoteIndex=notes.findIndex(note=>note.moduleId===moduleId&&note.lectureId===lectureId);if(existingNoteIndex>=0){// Update existing note\nconst updatedNote={...notes[existingNoteIndex],content,updatedAt:now};notes[existingNoteIndex]=updatedNote;saveAllNotes(notes);return updatedNote;}else{// Create a new note\nconst newNote={id:`${moduleId}_${lectureId}_${Date.now()}`,moduleId,lectureId,content,createdAt:now,updatedAt:now};notes.push(newNote);saveAllNotes(notes);return newNote;}};// Get all notes for a specific module\nexport const getNotesByModule=moduleId=>{const notes=getAllNotes();return notes.filter(note=>note.moduleId===moduleId);};// Delete a note\nexport const deleteNote=(moduleId,lectureId)=>{const notes=getAllNotes();const filteredNotes=notes.filter(note=>!(note.moduleId===moduleId&&note.lectureId===lectureId));saveAllNotes(filteredNotes);};// Export all notes as JSON\nexport const exportNotes=()=>{const notes=getAllNotes();return JSON.stringify(notes,null,2);};// Import notes from JSON\nexport const importNotes=jsonData=>{try{const notes=JSON.parse(jsonData);// Basic validation to ensure proper format\nif(!Array.isArray(notes)){return false;}saveAllNotes(notes);return true;}catch(error){console.error('Error importing notes:',error);return false;}};","map":{"version":3,"names":["NOTES_STORAGE_KEY","getAllNotes","notesData","localStorage","getItem","JSON","parse","error","console","saveAllNotes","notes","setItem","stringify","getNote","moduleId","lectureId","find","note","saveNote","content","now","Date","toISOString","existingNoteIndex","findIndex","updatedNote","updatedAt","newNote","id","createdAt","push","getNotesByModule","filter","deleteNote","filteredNotes","exportNotes","importNotes","jsonData","Array","isArray"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/services/notes.ts"],"sourcesContent":["// Notes management service\n\n// Interface for a note\nexport interface Note {\n    id: string;\n    moduleId: string;\n    lectureId: string;\n    content: string;\n    createdAt: string;\n    updatedAt: string;\n  }\n  \n  // Storage key for notes\n  const NOTES_STORAGE_KEY = 'platform_notes';\n  \n  // Get all notes\n  export const getAllNotes = (): Note[] => {\n    try {\n      const notesData = localStorage.getItem(NOTES_STORAGE_KEY);\n      if (!notesData) return [];\n      return JSON.parse(notesData);\n    } catch (error) {\n      console.error('Error retrieving notes from localStorage:', error);\n      return [];\n    }\n  };\n  \n  // Save all notes\n  export const saveAllNotes = (notes: Note[]): void => {\n    try {\n      localStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(notes));\n    } catch (error) {\n      console.error('Error saving notes to localStorage:', error);\n    }\n  };\n  \n  // Get a specific note\n  export const getNote = (moduleId: string, lectureId: string): Note | undefined => {\n    const notes = getAllNotes();\n    return notes.find(note => note.moduleId === moduleId && note.lectureId === lectureId);\n  };\n  \n  // Save or update a note\n  export const saveNote = (moduleId: string, lectureId: string, content: string): Note => {\n    const notes = getAllNotes();\n    const now = new Date().toISOString();\n    \n    // Check if the note already exists\n    const existingNoteIndex = notes.findIndex(\n      note => note.moduleId === moduleId && note.lectureId === lectureId\n    );\n    \n    if (existingNoteIndex >= 0) {\n      // Update existing note\n      const updatedNote = {\n        ...notes[existingNoteIndex],\n        content,\n        updatedAt: now\n      };\n      \n      notes[existingNoteIndex] = updatedNote;\n      saveAllNotes(notes);\n      return updatedNote;\n    } else {\n      // Create a new note\n      const newNote: Note = {\n        id: `${moduleId}_${lectureId}_${Date.now()}`,\n        moduleId,\n        lectureId,\n        content,\n        createdAt: now,\n        updatedAt: now\n      };\n      \n      notes.push(newNote);\n      saveAllNotes(notes);\n      return newNote;\n    }\n  };\n  \n  // Get all notes for a specific module\n  export const getNotesByModule = (moduleId: string): Note[] => {\n    const notes = getAllNotes();\n    return notes.filter(note => note.moduleId === moduleId);\n  };\n  \n  // Delete a note\n  export const deleteNote = (moduleId: string, lectureId: string): void => {\n    const notes = getAllNotes();\n    const filteredNotes = notes.filter(\n      note => !(note.moduleId === moduleId && note.lectureId === lectureId)\n    );\n    saveAllNotes(filteredNotes);\n  };\n  \n  // Export all notes as JSON\n  export const exportNotes = (): string => {\n    const notes = getAllNotes();\n    return JSON.stringify(notes, null, 2);\n  };\n  \n  // Import notes from JSON\n  export const importNotes = (jsonData: string): boolean => {\n    try {\n      const notes = JSON.parse(jsonData) as Note[];\n      // Basic validation to ensure proper format\n      if (!Array.isArray(notes)) {\n        return false;\n      }\n      saveAllNotes(notes);\n      return true;\n    } catch (error) {\n      console.error('Error importing notes:', error);\n      return false;\n    }\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}