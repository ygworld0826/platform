{"ast":null,"code":"// src/services/nft.ts - Update to use Pinata\n\n// Pinata API key storage keys\nconst PINATA_API_KEY_KEY = 'd44af853da8ffac7868c';\nconst PINATA_SECRET_KEY_KEY = 'pinata_secret_key';\nconst STORED_METADATA_KEY = 'stored_metadata';\n\n// Save Pinata API keys\nexport const savePinataKeys = (apiKey, secretKey) => {\n  localStorage.setItem(PINATA_API_KEY_KEY, apiKey);\n  localStorage.setItem(PINATA_SECRET_KEY_KEY, secretKey);\n};\n\n// Get Pinata API keys\nexport const getPinataKeys = () => {\n  return {\n    apiKey: localStorage.getItem(PINATA_API_KEY_KEY) || '',\n    secretKey: localStorage.getItem(PINATA_SECRET_KEY_KEY) || ''\n  };\n};\n\n// Upload image to Pinata\nexport const uploadImageToPinata = async file => {\n  const {\n    apiKey,\n    secretKey\n  } = getPinataKeys();\n  if (!apiKey || !secretKey) {\n    throw new Error('Pinata API keys not found');\n  }\n  const formData = new FormData();\n  formData.append('file', file);\n  const metadata = JSON.stringify({\n    name: file.name\n  });\n  formData.append('pinataMetadata', metadata);\n  const response = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n    method: 'POST',\n    headers: {\n      'pinata_api_key': apiKey,\n      'pinata_secret_api_key': secretKey\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to upload image: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return {\n    cid: data.IpfsHash,\n    url: `https://gateway.pinata.cloud/ipfs/${data.IpfsHash}`,\n    name: file.name,\n    size: file.size\n  };\n};\n\n// Store metadata to Pinata\nexport const storeMetadataToPinata = async metadata => {\n  const {\n    apiKey,\n    secretKey\n  } = getPinataKeys();\n  if (!apiKey || !secretKey) {\n    throw new Error('Pinata API keys not found');\n  }\n  const response = await fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'pinata_api_key': apiKey,\n      'pinata_secret_api_key': secretKey\n    },\n    body: JSON.stringify(metadata)\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to store metadata: ${response.statusText}`);\n  }\n  const data = await response.json();\n  const storedMetadata = {\n    id: Date.now().toString(),\n    cid: data.IpfsHash,\n    url: `https://gateway.pinata.cloud/ipfs/${data.IpfsHash}`,\n    metadata,\n    createdAt: new Date().toISOString()\n  };\n\n  // Store in local storage\n  saveStoredMetadata(storedMetadata);\n  return storedMetadata;\n};\n\n// Save stored metadata\nexport const saveStoredMetadata = metadata => {\n  const storedMetadata = getStoredMetadata();\n  storedMetadata.push(metadata);\n  localStorage.setItem(STORED_METADATA_KEY, JSON.stringify(storedMetadata));\n};\n\n// Get all stored metadata\nexport const getStoredMetadata = () => {\n  const storedMetadataStr = localStorage.getItem(STORED_METADATA_KEY);\n  return storedMetadataStr ? JSON.parse(storedMetadataStr) : [];\n};\n\n// Get stored metadata by ID\nexport const getStoredMetadataById = id => {\n  const storedMetadata = getStoredMetadata();\n  return storedMetadata.find(metadata => metadata.id === id);\n};\n\n// Delete stored metadata\nexport const deleteStoredMetadata = id => {\n  const storedMetadata = getStoredMetadata();\n  const filteredMetadata = storedMetadata.filter(metadata => metadata.id !== id);\n  localStorage.setItem(STORED_METADATA_KEY, JSON.stringify(filteredMetadata));\n};","map":{"version":3,"names":["PINATA_API_KEY_KEY","PINATA_SECRET_KEY_KEY","STORED_METADATA_KEY","savePinataKeys","apiKey","secretKey","localStorage","setItem","getPinataKeys","getItem","uploadImageToPinata","file","Error","formData","FormData","append","metadata","JSON","stringify","name","response","fetch","method","headers","body","ok","statusText","data","json","cid","IpfsHash","url","size","storeMetadataToPinata","storedMetadata","id","Date","now","toString","createdAt","toISOString","saveStoredMetadata","getStoredMetadata","push","storedMetadataStr","parse","getStoredMetadataById","find","deleteStoredMetadata","filteredMetadata","filter"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/services/nft.ts"],"sourcesContent":["// src/services/nft.ts - Update to use Pinata\n\nimport { NFTMetadata, UploadedImage, StoredMetadata } from '../types/nft';\n\n// Pinata API key storage keys\nconst PINATA_API_KEY_KEY = 'd44af853da8ffac7868c';\nconst PINATA_SECRET_KEY_KEY = 'pinata_secret_key';\nconst STORED_METADATA_KEY = 'stored_metadata';\n\n// Save Pinata API keys\nexport const savePinataKeys = (apiKey: string, secretKey: string): void => {\n  localStorage.setItem(PINATA_API_KEY_KEY, apiKey);\n  localStorage.setItem(PINATA_SECRET_KEY_KEY, secretKey);\n};\n\n// Get Pinata API keys\nexport const getPinataKeys = (): { apiKey: string; secretKey: string } => {\n  return {\n    apiKey: localStorage.getItem(PINATA_API_KEY_KEY) || '',\n    secretKey: localStorage.getItem(PINATA_SECRET_KEY_KEY) || ''\n  };\n};\n\n// Upload image to Pinata\nexport const uploadImageToPinata = async (file: File): Promise<UploadedImage> => {\n  const { apiKey, secretKey } = getPinataKeys();\n  if (!apiKey || !secretKey) {\n    throw new Error('Pinata API keys not found');\n  }\n\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  const metadata = JSON.stringify({\n    name: file.name,\n  });\n  formData.append('pinataMetadata', metadata);\n\n  const response = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n    method: 'POST',\n    headers: {\n      'pinata_api_key': apiKey,\n      'pinata_secret_api_key': secretKey,\n    },\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to upload image: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return {\n    cid: data.IpfsHash,\n    url: `https://gateway.pinata.cloud/ipfs/${data.IpfsHash}`,\n    name: file.name,\n    size: file.size,\n  };\n};\n\n// Store metadata to Pinata\nexport const storeMetadataToPinata = async (metadata: NFTMetadata): Promise<StoredMetadata> => {\n  const { apiKey, secretKey } = getPinataKeys();\n  if (!apiKey || !secretKey) {\n    throw new Error('Pinata API keys not found');\n  }\n\n  const response = await fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'pinata_api_key': apiKey,\n      'pinata_secret_api_key': secretKey,\n    },\n    body: JSON.stringify(metadata),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to store metadata: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  const storedMetadata: StoredMetadata = {\n    id: Date.now().toString(),\n    cid: data.IpfsHash,\n    url: `https://gateway.pinata.cloud/ipfs/${data.IpfsHash}`,\n    metadata,\n    createdAt: new Date().toISOString(),\n  };\n\n  // Store in local storage\n  saveStoredMetadata(storedMetadata);\n\n  return storedMetadata;\n};\n\n// Save stored metadata\nexport const saveStoredMetadata = (metadata: StoredMetadata): void => {\n  const storedMetadata = getStoredMetadata();\n  storedMetadata.push(metadata);\n  localStorage.setItem(STORED_METADATA_KEY, JSON.stringify(storedMetadata));\n};\n\n// Get all stored metadata\nexport const getStoredMetadata = (): StoredMetadata[] => {\n  const storedMetadataStr = localStorage.getItem(STORED_METADATA_KEY);\n  return storedMetadataStr ? JSON.parse(storedMetadataStr) : [];\n};\n\n// Get stored metadata by ID\nexport const getStoredMetadataById = (id: string): StoredMetadata | undefined => {\n  const storedMetadata = getStoredMetadata();\n  return storedMetadata.find((metadata) => metadata.id === id);\n};\n\n// Delete stored metadata\nexport const deleteStoredMetadata = (id: string): void => {\n  const storedMetadata = getStoredMetadata();\n  const filteredMetadata = storedMetadata.filter((metadata) => metadata.id !== id);\n  localStorage.setItem(STORED_METADATA_KEY, JSON.stringify(filteredMetadata));\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}