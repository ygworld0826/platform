{"ast":null,"code":"import axios from 'axios';\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  const apiKey = localStorage.getItem('pinataApiKey');\n  const apiSecret = localStorage.getItem('pinataApiSecret');\n  const jwt = localStorage.getItem('pinataJWT');\n  if (!apiKey && !jwt) {\n    throw new Error('Pinata API Key or JWT is not configured. Please add your API credentials in the settings.');\n  }\n\n  // Return headers based on available credentials\n  if (jwt) {\n    return {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    };\n  }\n  return {\n    headers: {\n      pinata_api_key: apiKey,\n      pinata_secret_api_key: apiSecret\n    }\n  };\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async file => {\n  try {\n    const config = getPinataConfig();\n\n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n\n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n\n    // Make the API request\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\n      ...config,\n      maxBodyLength: Infinity,\n      // This is needed for large files\n      headers: {\n        ...config.headers,\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        // We can implement progress tracking here if needed\n        console.log(`Upload progress: ${Math.round(progressEvent.loaded * 100 / (progressEvent.total || 1))}%`);\n      }\n    });\n\n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error uploading to Pinata:', error);\n\n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      if (statusCode === 401) {\n        throw new Error('Authentication failed. Please check your Pinata API keys or JWT token.');\n      } else if (statusCode === 429) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      } else if (responseData && responseData.error) {\n        throw new Error(responseData.error);\n      } else {\n        throw new Error(`Server error: ${statusCode}`);\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw new Error('No response from Pinata. Please check your internet connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw error;\n    }\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async metadata => {\n  try {\n    const config = getPinataConfig();\n\n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n\n    // Make the API request\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinJSONToIPFS', data, config);\n\n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error storing metadata on Pinata:', error);\n\n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      if (statusCode === 401) {\n        throw new Error('Authentication failed. Please check your Pinata API keys or JWT token.');\n      } else if (statusCode === 429) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      } else if (responseData && responseData.error) {\n        throw new Error(responseData.error);\n      } else {\n        throw new Error(`Server error: ${statusCode}`);\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw new Error('No response from Pinata. Please check your internet connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","getPinataConfig","apiKey","localStorage","getItem","apiSecret","jwt","Error","headers","Authorization","pinata_api_key","pinata_secret_api_key","uploadImageToPinata","file","config","formData","FormData","append","metadata","JSON","stringify","name","keyvalues","type","timestamp","Date","now","toString","pinataOptions","cidVersion","response","post","maxBodyLength","Infinity","onUploadProgress","progressEvent","console","log","Math","round","loaded","total","data","IpfsHash","url","ipfsHash","error","statusCode","status","responseData","request","storeMetadataToPinata","pinataMetadata","pinataContent"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/services/nft.ts"],"sourcesContent":["import axios from 'axios';\nimport { NFTMetadata } from '../types/nft';\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  const apiKey = localStorage.getItem('pinataApiKey');\n  const apiSecret = localStorage.getItem('pinataApiSecret');\n  const jwt = localStorage.getItem('pinataJWT');\n\n  if (!apiKey && !jwt) {\n    throw new Error('Pinata API Key or JWT is not configured. Please add your API credentials in the settings.');\n  }\n\n  // Return headers based on available credentials\n  if (jwt) {\n    return {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    };\n  }\n\n  return {\n    headers: {\n      pinata_api_key: apiKey,\n      pinata_secret_api_key: apiSecret\n    }\n  };\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async (file: File) => {\n  try {\n    const config = getPinataConfig();\n    \n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n    \n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n    \n    // Make the API request\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinFileToIPFS',\n      formData,\n      {\n        ...config,\n        maxBodyLength: Infinity, // This is needed for large files\n        headers: {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: (progressEvent) => {\n          // We can implement progress tracking here if needed\n          console.log(`Upload progress: ${Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1))}%`);\n        }\n      }\n    );\n    \n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('Error uploading to Pinata:', error);\n    \n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      \n      if (statusCode === 401) {\n        throw new Error('Authentication failed. Please check your Pinata API keys or JWT token.');\n      } else if (statusCode === 429) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      } else if (responseData && responseData.error) {\n        throw new Error(responseData.error);\n      } else {\n        throw new Error(`Server error: ${statusCode}`);\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw new Error('No response from Pinata. Please check your internet connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw error;\n    }\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async (metadata: NFTMetadata) => {\n  try {\n    const config = getPinataConfig();\n    \n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n    \n    // Make the API request\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinJSONToIPFS',\n      data,\n      config\n    );\n    \n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('Error storing metadata on Pinata:', error);\n    \n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      \n      if (statusCode === 401) {\n        throw new Error('Authentication failed. Please check your Pinata API keys or JWT token.');\n      } else if (statusCode === 429) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      } else if (responseData && responseData.error) {\n        throw new Error(responseData.error);\n      } else {\n        throw new Error(`Server error: ${statusCode}`);\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw new Error('No response from Pinata. Please check your internet connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}