{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoocho/Desktop/platform/blog/src/components/SimpleUploader.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleUploader = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Hardcoded API keys\n  const apiKey = \"4f5eb1e973348c67f7db\";\n  const apiSecret = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n  const handleFileChange = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      setFile(e.target.files[0]);\n      setError(null);\n    }\n  };\n  const uploadDirectly = async () => {\n    if (!file) {\n      setError(\"Please select a file first\");\n      return;\n    }\n    setIsUploading(true);\n    setError(null);\n    setResult(null);\n\n    // Create FormData\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add metadata\n    formData.append('pinataMetadata', JSON.stringify({\n      name: file.name\n    }));\n    try {\n      console.log(\"Starting direct upload to Pinata for file:\", file.name);\n\n      // Make direct request to Pinata\n      const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\n        headers: {\n          'pinata_api_key': apiKey,\n          'pinata_secret_api_key': apiSecret,\n          'Content-Type': 'multipart/form-data'\n        },\n        maxBodyLength: Infinity\n      });\n      console.log(\"Upload successful:\", response.data);\n      setResult(response.data);\n    } catch (error) {\n      console.error(\"Direct upload error:\", error);\n\n      // Try to stringify the error object for debugging\n      try {\n        console.error(\"Error as string:\", JSON.stringify(error, Object.getOwnPropertyNames(error)));\n      } catch (e) {\n        console.error(\"Error could not be stringified\");\n      }\n\n      // Try to get the most useful error message\n      let errorMessage = \"Upload failed\";\n      if (axios.isAxiosError(error) && error.response) {\n        // Log the entire response for debugging\n        console.error(\"Response data:\", error.response.data);\n        console.error(\"Response status:\", error.response.status);\n        errorMessage = typeof error.response.data === 'object' && error.response.data.error ? error.response.data.error : `Error ${error.response.status}`;\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      setError(errorMessage);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-md mx-auto bg-white rounded-xl shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Direct Pinata Upload Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        className: \"block w-full border border-gray-300 rounded p-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-2 bg-gray-100 rounded\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected: \", file.name, \" (\", Math.round(file.size / 1024), \" KB)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadDirectly,\n      disabled: !file || isUploading,\n      className: \"px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50\",\n      children: isUploading ? \"Uploading...\" : \"Upload Directly to Pinata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 p-3 bg-red-100 text-red-700 rounded\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 p-3 bg-green-100 text-green-700 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Successfully uploaded!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm mt-2\",\n        children: [\"IPFS Hash: \", result.IpfsHash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm mt-1\",\n        children: [\"URL: https://gateway.pinata.cloud/ipfs/\", result.IpfsHash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleUploader, \"Kur+bTjQmaXdIN520SfnisFh3dw=\");\n_c = SimpleUploader;\nexport default SimpleUploader;\nvar _c;\n$RefreshReg$(_c, \"SimpleUploader\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","SimpleUploader","_s","file","setFile","isUploading","setIsUploading","result","setResult","error","setError","apiKey","apiSecret","handleFileChange","e","target","files","length","uploadDirectly","formData","FormData","append","JSON","stringify","name","console","log","response","post","headers","maxBodyLength","Infinity","data","Object","getOwnPropertyNames","errorMessage","isAxiosError","status","Error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","Math","round","size","onClick","disabled","IpfsHash","_c","$RefreshReg$"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/components/SimpleUploader.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst SimpleUploader: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [result, setResult] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Hardcoded API keys\n  const apiKey = \"4f5eb1e973348c67f7db\";\n  const apiSecret = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setFile(e.target.files[0]);\n      setError(null);\n    }\n  };\n\n  const uploadDirectly = async () => {\n    if (!file) {\n      setError(\"Please select a file first\");\n      return;\n    }\n\n    setIsUploading(true);\n    setError(null);\n    setResult(null);\n\n    // Create FormData\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add metadata\n    formData.append('pinataMetadata', JSON.stringify({ name: file.name }));\n    \n    try {\n      console.log(\"Starting direct upload to Pinata for file:\", file.name);\n      \n      // Make direct request to Pinata\n      const response = await axios.post(\n        'https://api.pinata.cloud/pinning/pinFileToIPFS',\n        formData,\n        {\n          headers: {\n            'pinata_api_key': apiKey,\n            'pinata_secret_api_key': apiSecret,\n            'Content-Type': 'multipart/form-data'\n          },\n          maxBodyLength: Infinity\n        }\n      );\n      \n      console.log(\"Upload successful:\", response.data);\n      setResult(response.data);\n    } catch (error) {\n      console.error(\"Direct upload error:\", error);\n      \n      // Try to stringify the error object for debugging\n      try {\n        console.error(\"Error as string:\", JSON.stringify(error, Object.getOwnPropertyNames(error)));\n      } catch (e) {\n        console.error(\"Error could not be stringified\");\n      }\n      \n      // Try to get the most useful error message\n      let errorMessage = \"Upload failed\";\n      \n      if (axios.isAxiosError(error) && error.response) {\n        // Log the entire response for debugging\n        console.error(\"Response data:\", error.response.data);\n        console.error(\"Response status:\", error.response.status);\n        \n        errorMessage = typeof error.response.data === 'object' && error.response.data.error \n          ? error.response.data.error \n          : `Error ${error.response.status}`;\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-md mx-auto bg-white rounded-xl shadow-md\">\n      <h2 className=\"text-xl font-bold mb-4\">Direct Pinata Upload Test</h2>\n      \n      <div className=\"mb-4\">\n        <input \n          type=\"file\" \n          onChange={handleFileChange}\n          className=\"block w-full border border-gray-300 rounded p-2\"\n        />\n      </div>\n      \n      {file && (\n        <div className=\"mb-4 p-2 bg-gray-100 rounded\">\n          <p>Selected: {file.name} ({Math.round(file.size / 1024)} KB)</p>\n        </div>\n      )}\n      \n      <button\n        onClick={uploadDirectly}\n        disabled={!file || isUploading}\n        className=\"px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50\"\n      >\n        {isUploading ? \"Uploading...\" : \"Upload Directly to Pinata\"}\n      </button>\n      \n      {error && (\n        <div className=\"mt-4 p-3 bg-red-100 text-red-700 rounded\">\n          <p>Error: {error}</p>\n        </div>\n      )}\n      \n      {result && (\n        <div className=\"mt-4 p-3 bg-green-100 text-green-700 rounded\">\n          <p>Successfully uploaded!</p>\n          <p className=\"text-sm mt-2\">\n            IPFS Hash: {result.IpfsHash}\n          </p>\n          <p className=\"text-sm mt-1\">\n            URL: https://gateway.pinata.cloud/ipfs/{result.IpfsHash}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}