{"ast":null,"code":"import axios from'axios';// Local storage key for metadata items\nconst METADATA_STORAGE_KEY='nft_stored_metadata';// 하드코딩된 API 키\nconst FALLBACK_API_KEY=\"4f5eb1e973348c67f7db\";const FALLBACK_API_SECRET=\"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";// Function to get the Pinata API configuration\nexport const getPinataConfig=()=>{// 하드코딩된 API 키만 사용\nreturn{headers:{pinata_api_key:FALLBACK_API_KEY,pinata_secret_api_key:FALLBACK_API_SECRET}};};// Function to retrieve all stored metadata\nexport const getStoredMetadata=()=>{try{const storedData=localStorage.getItem(METADATA_STORAGE_KEY);if(!storedData){return[];}return JSON.parse(storedData);}catch(error){console.error('Error retrieving stored metadata:',error);return[];}};// Function to save a new metadata item\nexport const saveStoredMetadata=metadata=>{try{const existingMetadata=getStoredMetadata();existingMetadata.push(metadata);localStorage.setItem(METADATA_STORAGE_KEY,JSON.stringify(existingMetadata));}catch(error){console.error('Error saving metadata:',error);throw new Error('Failed to save metadata to local storage');}};// Function to delete a metadata item by ID\nexport const deleteStoredMetadata=id=>{try{const existingMetadata=getStoredMetadata();const updatedMetadata=existingMetadata.filter(item=>item.id!==id);localStorage.setItem(METADATA_STORAGE_KEY,JSON.stringify(updatedMetadata));}catch(error){console.error('Error deleting metadata:',error);throw new Error('Failed to delete metadata from local storage');}};// Function to upload an image to Pinata\nexport const uploadImageToPinata=async file=>{try{console.log('이미지 업로드 시작:',file.name);// Create form data\nconst formData=new FormData();formData.append('file',file);// Add metadata\nconst metadata=JSON.stringify({name:file.name,keyvalues:{type:'nft-image',timestamp:Date.now().toString()}});formData.append('pinataMetadata',metadata);// Add pinata options\nconst pinataOptions=JSON.stringify({cidVersion:1});formData.append('pinataOptions',pinataOptions);// 하드코딩된 API 키로 직접 요청\nconst response=await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS',formData,{headers:{pinata_api_key:FALLBACK_API_KEY,pinata_secret_api_key:FALLBACK_API_SECRET,'Content-Type':'multipart/form-data'},maxContentLength:Infinity,maxBodyLength:Infinity});console.log('Pinata 응답:',response.data);// If successful, return the IPFS URL\nif(response.data&&response.data.IpfsHash){return{url:`https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,ipfsHash:response.data.IpfsHash};}else{throw new Error('Invalid response from Pinata');}}catch(error){console.error('이미지 업로드 에러 세부 정보:',error);// 구체적인 에러 메시지 생성\nlet errorMessage=\"Unknown upload error\";if(axios.isAxiosError(error)){// AxiosError 타입으로 처리\nconst axiosError=error;if(axiosError.response){// 타입스크립트에 맞게 명시적 타입 변환\nconst responseData=axiosError.response.data;errorMessage=(responseData===null||responseData===void 0?void 0:responseData.error)||`Server error: ${axiosError.response.status}`;}else if(axiosError.message){errorMessage=axiosError.message;}}else if(error&&typeof error==='object'&&'message'in error){// 일반 Error 객체 처리\nerrorMessage=String(error.message);}else if(typeof error==='string'){errorMessage=error;}// 표준 Error 객체로 던지기\nthrow new Error(errorMessage);}};// Function to store metadata to Pinata\nexport const storeMetadataToPinata=async metadata=>{try{console.log('메타데이터 저장 시작:',metadata.name);// Prepare the JSON to be pinned\nconst data={pinataOptions:{cidVersion:1},pinataMetadata:{name:`${metadata.name}-metadata`,keyvalues:{type:'nft-metadata',timestamp:Date.now().toString()}},pinataContent:metadata};// 하드코딩된 API 키로 직접 요청\nconst response=await axios.post('https://api.pinata.cloud/pinning/pinJSONToIPFS',data,{headers:{pinata_api_key:FALLBACK_API_KEY,pinata_secret_api_key:FALLBACK_API_SECRET,'Content-Type':'application/json'}});console.log('메타데이터 저장 응답:',response.data);// If successful, return the IPFS URL and save to local storage\nif(response.data&&response.data.IpfsHash){const result={url:`https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,ipfsHash:response.data.IpfsHash};// Create a StoredMetadata object\nconst storedMetadata={id:typeof crypto!=='undefined'&&crypto.randomUUID?crypto.randomUUID():Date.now().toString(),cid:response.data.IpfsHash,url:result.url,metadata:metadata,createdAt:new Date().toISOString()};// Save to local storage\nsaveStoredMetadata(storedMetadata);return result;}else{throw new Error('Invalid response from Pinata');}}catch(error){console.error('메타데이터 저장 에러 세부 정보:',error);// 구체적인 에러 메시지 생성\nlet errorMessage=\"Unknown metadata storage error\";if(axios.isAxiosError(error)){// AxiosError 타입으로 처리\nconst axiosError=error;if(axiosError.response){// 타입스크립트에 맞게 명시적 타입 변환\nconst responseData=axiosError.response.data;errorMessage=(responseData===null||responseData===void 0?void 0:responseData.error)||`Server error: ${axiosError.response.status}`;}else if(axiosError.message){errorMessage=axiosError.message;}}else if(error&&typeof error==='object'&&'message'in error){// 일반 Error 객체 처리\nerrorMessage=String(error.message);}else if(typeof error==='string'){errorMessage=error;}// 표준 Error 객체로 던지기\nthrow new Error(errorMessage);}};","map":{"version":3,"names":["axios","METADATA_STORAGE_KEY","FALLBACK_API_KEY","FALLBACK_API_SECRET","getPinataConfig","headers","pinata_api_key","pinata_secret_api_key","getStoredMetadata","storedData","localStorage","getItem","JSON","parse","error","console","saveStoredMetadata","metadata","existingMetadata","push","setItem","stringify","Error","deleteStoredMetadata","id","updatedMetadata","filter","item","uploadImageToPinata","file","log","name","formData","FormData","append","keyvalues","type","timestamp","Date","now","toString","pinataOptions","cidVersion","response","post","maxContentLength","Infinity","maxBodyLength","data","IpfsHash","url","ipfsHash","errorMessage","isAxiosError","axiosError","responseData","status","message","String","storeMetadataToPinata","pinataMetadata","pinataContent","result","storedMetadata","crypto","randomUUID","cid","createdAt","toISOString"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/services/nft.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { NFTMetadata, StoredMetadata } from '../types/nft';\n\n// Local storage key for metadata items\nconst METADATA_STORAGE_KEY = 'nft_stored_metadata';\n\n// 하드코딩된 API 키\nconst FALLBACK_API_KEY = \"4f5eb1e973348c67f7db\";\nconst FALLBACK_API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  // 하드코딩된 API 키만 사용\n  return {\n    headers: {\n      pinata_api_key: FALLBACK_API_KEY,\n      pinata_secret_api_key: FALLBACK_API_SECRET\n    }\n  };\n};\n\n// Function to retrieve all stored metadata\nexport const getStoredMetadata = (): StoredMetadata[] => {\n  try {\n    const storedData = localStorage.getItem(METADATA_STORAGE_KEY);\n    if (!storedData) {\n      return [];\n    }\n    \n    return JSON.parse(storedData) as StoredMetadata[];\n  } catch (error) {\n    console.error('Error retrieving stored metadata:', error);\n    return [];\n  }\n};\n\n// Function to save a new metadata item\nexport const saveStoredMetadata = (metadata: StoredMetadata): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    existingMetadata.push(metadata);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(existingMetadata));\n  } catch (error) {\n    console.error('Error saving metadata:', error);\n    throw new Error('Failed to save metadata to local storage');\n  }\n};\n\n// Function to delete a metadata item by ID\nexport const deleteStoredMetadata = (id: string): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    const updatedMetadata = existingMetadata.filter(item => item.id !== id);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(updatedMetadata));\n  } catch (error) {\n    console.error('Error deleting metadata:', error);\n    throw new Error('Failed to delete metadata from local storage');\n  }\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async (file: File) => {\n  try {\n    console.log('이미지 업로드 시작:', file.name);\n    \n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n    \n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n    \n    // 하드코딩된 API 키로 직접 요청\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinFileToIPFS',\n      formData,\n      {\n        headers: {\n          pinata_api_key: FALLBACK_API_KEY,\n          pinata_secret_api_key: FALLBACK_API_SECRET,\n          'Content-Type': 'multipart/form-data'\n        },\n        maxContentLength: Infinity as any,\n        maxBodyLength: Infinity as any\n      }\n    );\n    \n    console.log('Pinata 응답:', response.data);\n    \n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('이미지 업로드 에러 세부 정보:', error);\n    \n    // 구체적인 에러 메시지 생성\n    let errorMessage = \"Unknown upload error\";\n    \n    if (axios.isAxiosError(error)) {\n      // AxiosError 타입으로 처리\n      const axiosError = error as AxiosError;\n      if (axiosError.response) {\n        // 타입스크립트에 맞게 명시적 타입 변환\n        const responseData = axiosError.response.data as any;\n        errorMessage = responseData?.error || `Server error: ${axiosError.response.status}`;\n      } else if (axiosError.message) {\n        errorMessage = axiosError.message;\n      }\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      // 일반 Error 객체 처리\n      errorMessage = String(error.message);\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n    \n    // 표준 Error 객체로 던지기\n    throw new Error(errorMessage);\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async (metadata: NFTMetadata) => {\n  try {\n    console.log('메타데이터 저장 시작:', metadata.name);\n    \n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n    \n    // 하드코딩된 API 키로 직접 요청\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinJSONToIPFS',\n      data,\n      {\n        headers: {\n          pinata_api_key: FALLBACK_API_KEY,\n          pinata_secret_api_key: FALLBACK_API_SECRET,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('메타데이터 저장 응답:', response.data);\n    \n    // If successful, return the IPFS URL and save to local storage\n    if (response.data && response.data.IpfsHash) {\n      const result = {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n      \n      // Create a StoredMetadata object\n      const storedMetadata: StoredMetadata = {\n        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),\n        cid: response.data.IpfsHash,\n        url: result.url,\n        metadata: metadata,\n        createdAt: new Date().toISOString()\n      };\n      \n      // Save to local storage\n      saveStoredMetadata(storedMetadata);\n      \n      return result;\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('메타데이터 저장 에러 세부 정보:', error);\n    \n    // 구체적인 에러 메시지 생성\n    let errorMessage = \"Unknown metadata storage error\";\n    \n    if (axios.isAxiosError(error)) {\n      // AxiosError 타입으로 처리\n      const axiosError = error as AxiosError;\n      if (axiosError.response) {\n        // 타입스크립트에 맞게 명시적 타입 변환\n        const responseData = axiosError.response.data as any;\n        errorMessage = responseData?.error || `Server error: ${axiosError.response.status}`;\n      } else if (axiosError.message) {\n        errorMessage = axiosError.message;\n      }\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      // 일반 Error 객체 처리\n      errorMessage = String(error.message);\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n    \n    // 표준 Error 객체로 던지기\n    throw new Error(errorMessage);\n  }\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAsB,OAAO,CAGzC;AACA,KAAM,CAAAC,oBAAoB,CAAG,qBAAqB,CAElD;AACA,KAAM,CAAAC,gBAAgB,CAAG,sBAAsB,CAC/C,KAAM,CAAAC,mBAAmB,CAAG,kEAAkE,CAE9F;AACA,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACnC;AACA,MAAO,CACLC,OAAO,CAAE,CACPC,cAAc,CAAEJ,gBAAgB,CAChCK,qBAAqB,CAAEJ,mBACzB,CACF,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,iBAAiB,CAAGA,CAAA,GAAwB,CACvD,GAAI,CACF,KAAM,CAAAC,UAAU,CAAGC,YAAY,CAACC,OAAO,CAACV,oBAAoB,CAAC,CAC7D,GAAI,CAACQ,UAAU,CAAE,CACf,MAAO,EAAE,CACX,CAEA,MAAO,CAAAG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAC/B,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,EAAE,CACX,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,kBAAkB,CAAIC,QAAwB,EAAW,CACpE,GAAI,CACF,KAAM,CAAAC,gBAAgB,CAAGV,iBAAiB,CAAC,CAAC,CAC5CU,gBAAgB,CAACC,IAAI,CAACF,QAAQ,CAAC,CAC/BP,YAAY,CAACU,OAAO,CAACnB,oBAAoB,CAAEW,IAAI,CAACS,SAAS,CAACH,gBAAgB,CAAC,CAAC,CAC9E,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,IAAI,CAAAQ,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,oBAAoB,CAAIC,EAAU,EAAW,CACxD,GAAI,CACF,KAAM,CAAAN,gBAAgB,CAAGV,iBAAiB,CAAC,CAAC,CAC5C,KAAM,CAAAiB,eAAe,CAAGP,gBAAgB,CAACQ,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACH,EAAE,GAAKA,EAAE,CAAC,CACvEd,YAAY,CAACU,OAAO,CAACnB,oBAAoB,CAAEW,IAAI,CAACS,SAAS,CAACI,eAAe,CAAC,CAAC,CAC7E,CAAE,MAAOX,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,IAAI,CAAAQ,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,mBAAmB,CAAG,KAAO,CAAAC,IAAU,EAAK,CACvD,GAAI,CACFd,OAAO,CAACe,GAAG,CAAC,aAAa,CAAED,IAAI,CAACE,IAAI,CAAC,CAErC;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEL,IAAI,CAAC,CAE7B;AACA,KAAM,CAAAZ,QAAQ,CAAGL,IAAI,CAACS,SAAS,CAAC,CAC9BU,IAAI,CAAEF,IAAI,CAACE,IAAI,CACfI,SAAS,CAAE,CACTC,IAAI,CAAE,WAAW,CACjBC,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CACjC,CACF,CAAC,CAAC,CACFR,QAAQ,CAACE,MAAM,CAAC,gBAAgB,CAAEjB,QAAQ,CAAC,CAE3C;AACA,KAAM,CAAAwB,aAAa,CAAG7B,IAAI,CAACS,SAAS,CAAC,CACnCqB,UAAU,CAAE,CACd,CAAC,CAAC,CACFV,QAAQ,CAACE,MAAM,CAAC,eAAe,CAAEO,aAAa,CAAC,CAE/C;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAA3C,KAAK,CAAC4C,IAAI,CAC/B,gDAAgD,CAChDZ,QAAQ,CACR,CACE3B,OAAO,CAAE,CACPC,cAAc,CAAEJ,gBAAgB,CAChCK,qBAAqB,CAAEJ,mBAAmB,CAC1C,cAAc,CAAE,qBAClB,CAAC,CACD0C,gBAAgB,CAAEC,QAAe,CACjCC,aAAa,CAAED,QACjB,CACF,CAAC,CAED/B,OAAO,CAACe,GAAG,CAAC,YAAY,CAAEa,QAAQ,CAACK,IAAI,CAAC,CAExC;AACA,GAAIL,QAAQ,CAACK,IAAI,EAAIL,QAAQ,CAACK,IAAI,CAACC,QAAQ,CAAE,CAC3C,MAAO,CACLC,GAAG,CAAE,qCAAqCP,QAAQ,CAACK,IAAI,CAACC,QAAQ,EAAE,CAClEE,QAAQ,CAAER,QAAQ,CAACK,IAAI,CAACC,QAC1B,CAAC,CACH,CAAC,IAAM,CACL,KAAM,IAAI,CAAA3B,KAAK,CAAC,8BAA8B,CAAC,CACjD,CACF,CAAE,MAAOR,KAAU,CAAE,CACnBC,OAAO,CAACD,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAEzC;AACA,GAAI,CAAAsC,YAAY,CAAG,sBAAsB,CAEzC,GAAIpD,KAAK,CAACqD,YAAY,CAACvC,KAAK,CAAC,CAAE,CAC7B;AACA,KAAM,CAAAwC,UAAU,CAAGxC,KAAmB,CACtC,GAAIwC,UAAU,CAACX,QAAQ,CAAE,CACvB;AACA,KAAM,CAAAY,YAAY,CAAGD,UAAU,CAACX,QAAQ,CAACK,IAAW,CACpDI,YAAY,CAAG,CAAAG,YAAY,SAAZA,YAAY,iBAAZA,YAAY,CAAEzC,KAAK,GAAI,iBAAiBwC,UAAU,CAACX,QAAQ,CAACa,MAAM,EAAE,CACrF,CAAC,IAAM,IAAIF,UAAU,CAACG,OAAO,CAAE,CAC7BL,YAAY,CAAGE,UAAU,CAACG,OAAO,CACnC,CACF,CAAC,IAAM,IAAI3C,KAAK,EAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAI,SAAS,EAAI,CAAAA,KAAK,CAAE,CACnE;AACAsC,YAAY,CAAGM,MAAM,CAAC5C,KAAK,CAAC2C,OAAO,CAAC,CACtC,CAAC,IAAM,IAAI,MAAO,CAAA3C,KAAK,GAAK,QAAQ,CAAE,CACpCsC,YAAY,CAAGtC,KAAK,CACtB,CAEA;AACA,KAAM,IAAI,CAAAQ,KAAK,CAAC8B,YAAY,CAAC,CAC/B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,qBAAqB,CAAG,KAAO,CAAA1C,QAAqB,EAAK,CACpE,GAAI,CACFF,OAAO,CAACe,GAAG,CAAC,cAAc,CAAEb,QAAQ,CAACc,IAAI,CAAC,CAE1C;AACA,KAAM,CAAAiB,IAAI,CAAG,CACXP,aAAa,CAAE,CACbC,UAAU,CAAE,CACd,CAAC,CACDkB,cAAc,CAAE,CACd7B,IAAI,CAAE,GAAGd,QAAQ,CAACc,IAAI,WAAW,CACjCI,SAAS,CAAE,CACTC,IAAI,CAAE,cAAc,CACpBC,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CACjC,CACF,CAAC,CACDqB,aAAa,CAAE5C,QACjB,CAAC,CAED;AACA,KAAM,CAAA0B,QAAQ,CAAG,KAAM,CAAA3C,KAAK,CAAC4C,IAAI,CAC/B,gDAAgD,CAChDI,IAAI,CACJ,CACE3C,OAAO,CAAE,CACPC,cAAc,CAAEJ,gBAAgB,CAChCK,qBAAqB,CAAEJ,mBAAmB,CAC1C,cAAc,CAAE,kBAClB,CACF,CACF,CAAC,CAEDY,OAAO,CAACe,GAAG,CAAC,cAAc,CAAEa,QAAQ,CAACK,IAAI,CAAC,CAE1C;AACA,GAAIL,QAAQ,CAACK,IAAI,EAAIL,QAAQ,CAACK,IAAI,CAACC,QAAQ,CAAE,CAC3C,KAAM,CAAAa,MAAM,CAAG,CACbZ,GAAG,CAAE,qCAAqCP,QAAQ,CAACK,IAAI,CAACC,QAAQ,EAAE,CAClEE,QAAQ,CAAER,QAAQ,CAACK,IAAI,CAACC,QAC1B,CAAC,CAED;AACA,KAAM,CAAAc,cAA8B,CAAG,CACrCvC,EAAE,CAAE,MAAO,CAAAwC,MAAM,GAAK,WAAW,EAAIA,MAAM,CAACC,UAAU,CAAGD,MAAM,CAACC,UAAU,CAAC,CAAC,CAAG3B,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CACpG0B,GAAG,CAAEvB,QAAQ,CAACK,IAAI,CAACC,QAAQ,CAC3BC,GAAG,CAAEY,MAAM,CAACZ,GAAG,CACfjC,QAAQ,CAAEA,QAAQ,CAClBkD,SAAS,CAAE,GAAI,CAAA7B,IAAI,CAAC,CAAC,CAAC8B,WAAW,CAAC,CACpC,CAAC,CAED;AACApD,kBAAkB,CAAC+C,cAAc,CAAC,CAElC,MAAO,CAAAD,MAAM,CACf,CAAC,IAAM,CACL,KAAM,IAAI,CAAAxC,KAAK,CAAC,8BAA8B,CAAC,CACjD,CACF,CAAE,MAAOR,KAAU,CAAE,CACnBC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAE1C;AACA,GAAI,CAAAsC,YAAY,CAAG,gCAAgC,CAEnD,GAAIpD,KAAK,CAACqD,YAAY,CAACvC,KAAK,CAAC,CAAE,CAC7B;AACA,KAAM,CAAAwC,UAAU,CAAGxC,KAAmB,CACtC,GAAIwC,UAAU,CAACX,QAAQ,CAAE,CACvB;AACA,KAAM,CAAAY,YAAY,CAAGD,UAAU,CAACX,QAAQ,CAACK,IAAW,CACpDI,YAAY,CAAG,CAAAG,YAAY,SAAZA,YAAY,iBAAZA,YAAY,CAAEzC,KAAK,GAAI,iBAAiBwC,UAAU,CAACX,QAAQ,CAACa,MAAM,EAAE,CACrF,CAAC,IAAM,IAAIF,UAAU,CAACG,OAAO,CAAE,CAC7BL,YAAY,CAAGE,UAAU,CAACG,OAAO,CACnC,CACF,CAAC,IAAM,IAAI3C,KAAK,EAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAI,SAAS,EAAI,CAAAA,KAAK,CAAE,CACnE;AACAsC,YAAY,CAAGM,MAAM,CAAC5C,KAAK,CAAC2C,OAAO,CAAC,CACtC,CAAC,IAAM,IAAI,MAAO,CAAA3C,KAAK,GAAK,QAAQ,CAAE,CACpCsC,YAAY,CAAGtC,KAAK,CACtB,CAEA;AACA,KAAM,IAAI,CAAAQ,KAAK,CAAC8B,YAAY,CAAC,CAC/B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}