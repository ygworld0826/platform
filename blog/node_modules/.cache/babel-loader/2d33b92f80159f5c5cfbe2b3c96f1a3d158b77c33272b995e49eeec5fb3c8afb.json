{"ast":null,"code":"import axios from 'axios';\n// Local storage key for metadata items\nconst METADATA_STORAGE_KEY = 'nft_stored_metadata';\n\n// 하드코딩된 API 키 (최후의 수단으로 사용)\nconst FALLBACK_API_KEY = \"4f5eb1e973348c67f7db\";\nconst FALLBACK_API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  try {\n    const apiKey = localStorage.getItem('pinataApiKey');\n    const apiSecret = localStorage.getItem('pinataApiSecret');\n    const jwt = localStorage.getItem('pinataJWT');\n    console.log('로컬스토리지에서 불러온 Pinata 설정:');\n    console.log('API Key 존재:', !!apiKey);\n    console.log('API Secret 존재:', !!apiSecret);\n    console.log('JWT 존재:', !!jwt);\n\n    // 저장된 API 키가 있는 경우\n    if (apiKey && apiSecret) {\n      console.log('저장된 API 키 사용');\n      return {\n        headers: {\n          pinata_api_key: apiKey,\n          pinata_secret_api_key: apiSecret\n        }\n      };\n    }\n\n    // JWT가 있는 경우\n    if (jwt) {\n      console.log('저장된 JWT 사용');\n      return {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      };\n    }\n\n    // 저장된 설정이 없는 경우 하드코딩된 API 키 사용\n    console.log('하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  } catch (error) {\n    console.error('Pinata 설정 가져오기 오류:', error);\n\n    // 오류 발생 시 하드코딩된 API 키 반환\n    console.log('오류 발생으로 하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  }\n};\n\n// Function to retrieve all stored metadata\nexport const getStoredMetadata = () => {\n  try {\n    const storedData = localStorage.getItem(METADATA_STORAGE_KEY);\n    if (!storedData) {\n      return [];\n    }\n    return JSON.parse(storedData);\n  } catch (error) {\n    console.error('Error retrieving stored metadata:', error);\n    return [];\n  }\n};\n\n// Function to save a new metadata item\nexport const saveStoredMetadata = metadata => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    existingMetadata.push(metadata);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(existingMetadata));\n  } catch (error) {\n    console.error('Error saving metadata:', error);\n    throw new Error('Failed to save metadata to local storage');\n  }\n};\n\n// Function to delete a metadata item by ID\nexport const deleteStoredMetadata = id => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    const updatedMetadata = existingMetadata.filter(item => item.id !== id);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(updatedMetadata));\n  } catch (error) {\n    console.error('Error deleting metadata:', error);\n    throw new Error('Failed to delete metadata from local storage');\n  }\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async file => {\n  try {\n    // 하드코딩된 API 키 직접 사용 (최후의 수단)\n    const config = {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET,\n        'Content-Type': 'multipart/form-data'\n      },\n      maxBodyLength: Infinity\n    };\n    console.log('하드코딩된 API 키로 직접 이미지 업로드 시도');\n\n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n\n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n\n    // Make the API request\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, config);\n    console.log('Pinata 응답:', response.data);\n\n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error uploading to Pinata:', error);\n\n    // 명시적인 오류 처리\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        // 서버 응답이 있는 경우\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        if (error.response.data && typeof error.response.data === 'object') {\n          const errorData = error.response.data;\n          if (errorData.error) {\n            throw new Error(`Server error: ${errorData.error}`);\n          }\n        }\n        throw new Error(`Server error: ${error.response.status}`);\n      } else if (error.request) {\n        // 요청은 보냈지만 응답을 받지 못한 경우\n        throw new Error('No response received from server. Please check your internet connection.');\n      } else {\n        // 요청 설정 중 오류 발생\n        throw new Error(`Request error: ${error.message}`);\n      }\n    }\n\n    // 기타 알 수 없는 오류\n    throw new Error(`Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async metadata => {\n  try {\n    // 하드코딩된 API 키 직접 사용\n    const config = {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET,\n        'Content-Type': 'application/json'\n      }\n    };\n    console.log('하드코딩된 API 키로 직접 메타데이터 저장 시도');\n\n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n\n    // Make the API request\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinJSONToIPFS', data, config);\n    console.log('메타데이터 저장 응답:', response.data);\n\n    // If successful, return the IPFS URL and save to local storage\n    if (response.data && response.data.IpfsHash) {\n      const result = {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n\n      // Create a StoredMetadata object\n      const storedMetadata = {\n        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),\n        cid: response.data.IpfsHash,\n        url: result.url,\n        metadata: metadata,\n        createdAt: new Date().toISOString()\n      };\n\n      // Save to local storage\n      saveStoredMetadata(storedMetadata);\n      return result;\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error storing metadata on Pinata:', error);\n\n    // 명시적인 오류 처리\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        // 서버 응답이 있는 경우\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        if (error.response.data && typeof error.response.data === 'object') {\n          const errorData = error.response.data;\n          if (errorData.error) {\n            throw new Error(`Server error: ${errorData.error}`);\n          }\n        }\n        throw new Error(`Server error: ${error.response.status}`);\n      } else if (error.request) {\n        // 요청은 보냈지만 응답을 받지 못한 경우\n        throw new Error('No response received from server. Please check your internet connection.');\n      } else {\n        // 요청 설정 중 오류 발생\n        throw new Error(`Request error: ${error.message}`);\n      }\n    }\n\n    // 기타 알 수 없는 오류\n    throw new Error(`Metadata storage failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};","map":{"version":3,"names":["axios","METADATA_STORAGE_KEY","FALLBACK_API_KEY","FALLBACK_API_SECRET","getPinataConfig","apiKey","localStorage","getItem","apiSecret","jwt","console","log","headers","pinata_api_key","pinata_secret_api_key","Authorization","error","getStoredMetadata","storedData","JSON","parse","saveStoredMetadata","metadata","existingMetadata","push","setItem","stringify","Error","deleteStoredMetadata","id","updatedMetadata","filter","item","uploadImageToPinata","file","config","maxBodyLength","Infinity","formData","FormData","append","name","keyvalues","type","timestamp","Date","now","toString","pinataOptions","cidVersion","response","post","data","IpfsHash","url","ipfsHash","isAxiosError","status","errorData","request","message","storeMetadataToPinata","pinataMetadata","pinataContent","result","storedMetadata","crypto","randomUUID","cid","createdAt","toISOString"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/services/nft.ts"],"sourcesContent":["import axios from 'axios';\nimport { NFTMetadata, StoredMetadata } from '../types/nft';\n\n// Local storage key for metadata items\nconst METADATA_STORAGE_KEY = 'nft_stored_metadata';\n\n// 하드코딩된 API 키 (최후의 수단으로 사용)\nconst FALLBACK_API_KEY = \"4f5eb1e973348c67f7db\";\nconst FALLBACK_API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  try {\n    const apiKey = localStorage.getItem('pinataApiKey');\n    const apiSecret = localStorage.getItem('pinataApiSecret');\n    const jwt = localStorage.getItem('pinataJWT');\n\n    console.log('로컬스토리지에서 불러온 Pinata 설정:');\n    console.log('API Key 존재:', !!apiKey);\n    console.log('API Secret 존재:', !!apiSecret);\n    console.log('JWT 존재:', !!jwt);\n\n    // 저장된 API 키가 있는 경우\n    if (apiKey && apiSecret) {\n      console.log('저장된 API 키 사용');\n      return {\n        headers: {\n          pinata_api_key: apiKey,\n          pinata_secret_api_key: apiSecret\n        }\n      };\n    }\n    \n    // JWT가 있는 경우\n    if (jwt) {\n      console.log('저장된 JWT 사용');\n      return {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      };\n    }\n\n    // 저장된 설정이 없는 경우 하드코딩된 API 키 사용\n    console.log('하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  } catch (error) {\n    console.error('Pinata 설정 가져오기 오류:', error);\n    \n    // 오류 발생 시 하드코딩된 API 키 반환\n    console.log('오류 발생으로 하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  }\n};\n\n// Function to retrieve all stored metadata\nexport const getStoredMetadata = (): StoredMetadata[] => {\n  try {\n    const storedData = localStorage.getItem(METADATA_STORAGE_KEY);\n    if (!storedData) {\n      return [];\n    }\n    \n    return JSON.parse(storedData) as StoredMetadata[];\n  } catch (error) {\n    console.error('Error retrieving stored metadata:', error);\n    return [];\n  }\n};\n\n// Function to save a new metadata item\nexport const saveStoredMetadata = (metadata: StoredMetadata): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    existingMetadata.push(metadata);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(existingMetadata));\n  } catch (error) {\n    console.error('Error saving metadata:', error);\n    throw new Error('Failed to save metadata to local storage');\n  }\n};\n\n// Function to delete a metadata item by ID\nexport const deleteStoredMetadata = (id: string): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    const updatedMetadata = existingMetadata.filter(item => item.id !== id);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(updatedMetadata));\n  } catch (error) {\n    console.error('Error deleting metadata:', error);\n    throw new Error('Failed to delete metadata from local storage');\n  }\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async (file: File) => {\n  try {\n    // 하드코딩된 API 키 직접 사용 (최후의 수단)\n    const config = {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET,\n        'Content-Type': 'multipart/form-data'\n      },\n      maxBodyLength: Infinity\n    };\n    \n    console.log('하드코딩된 API 키로 직접 이미지 업로드 시도');\n    \n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n    \n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n    \n    // Make the API request\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinFileToIPFS',\n      formData,\n      config\n    );\n    \n    console.log('Pinata 응답:', response.data);\n    \n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error uploading to Pinata:', error);\n    \n    // 명시적인 오류 처리\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        // 서버 응답이 있는 경우\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        \n        if (error.response.data && typeof error.response.data === 'object') {\n          const errorData = error.response.data;\n          if (errorData.error) {\n            throw new Error(`Server error: ${errorData.error}`);\n          }\n        }\n        \n        throw new Error(`Server error: ${error.response.status}`);\n      } else if (error.request) {\n        // 요청은 보냈지만 응답을 받지 못한 경우\n        throw new Error('No response received from server. Please check your internet connection.');\n      } else {\n        // 요청 설정 중 오류 발생\n        throw new Error(`Request error: ${error.message}`);\n      }\n    }\n    \n    // 기타 알 수 없는 오류\n    throw new Error(`Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async (metadata: NFTMetadata) => {\n  try {\n    // 하드코딩된 API 키 직접 사용\n    const config = {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET,\n        'Content-Type': 'application/json'\n      }\n    };\n    \n    console.log('하드코딩된 API 키로 직접 메타데이터 저장 시도');\n    \n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n    \n    // Make the API request\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinJSONToIPFS',\n      data,\n      config\n    );\n    \n    console.log('메타데이터 저장 응답:', response.data);\n    \n    // If successful, return the IPFS URL and save to local storage\n    if (response.data && response.data.IpfsHash) {\n      const result = {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n      \n      // Create a StoredMetadata object\n      const storedMetadata: StoredMetadata = {\n        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),\n        cid: response.data.IpfsHash,\n        url: result.url,\n        metadata: metadata,\n        createdAt: new Date().toISOString()\n      };\n      \n      // Save to local storage\n      saveStoredMetadata(storedMetadata);\n      \n      return result;\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error storing metadata on Pinata:', error);\n    \n    // 명시적인 오류 처리\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        // 서버 응답이 있는 경우\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        \n        if (error.response.data && typeof error.response.data === 'object') {\n          const errorData = error.response.data;\n          if (errorData.error) {\n            throw new Error(`Server error: ${errorData.error}`);\n          }\n        }\n        \n        throw new Error(`Server error: ${error.response.status}`);\n      } else if (error.request) {\n        // 요청은 보냈지만 응답을 받지 못한 경우\n        throw new Error('No response received from server. Please check your internet connection.');\n      } else {\n        // 요청 설정 중 오류 발생\n        throw new Error(`Request error: ${error.message}`);\n      }\n    }\n    \n    // 기타 알 수 없는 오류\n    throw new Error(`Metadata storage failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}