{"ast":null,"code":"import axios from 'axios';\n// Local storage key for metadata items\nconst METADATA_STORAGE_KEY = 'nft_stored_metadata';\n\n// 하드코딩된 API 키 (최후의 수단으로 사용)\nconst FALLBACK_API_KEY = \"4f5eb1e973348c67f7db\";\nconst FALLBACK_API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n// Helper function to extract error message from various error types\nconst getErrorMessage = error => {\n  if (typeof error === 'string') return error;\n  if (error instanceof Error) return error.message;\n  if (error && typeof error === 'object') {\n    if ('message' in error) return String(error.message);\n    if ('error' in error) return String(error.error);\n    try {\n      return JSON.stringify(error); // Last resort - convert object to string\n    } catch (e) {\n      return \"Cannot display error details\";\n    }\n  }\n  return 'Unknown error occurred';\n};\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  try {\n    const apiKey = localStorage.getItem('pinataApiKey');\n    const apiSecret = localStorage.getItem('pinataApiSecret');\n    const jwt = localStorage.getItem('pinataJWT');\n    console.log('로컬스토리지에서 불러온 Pinata 설정:');\n    console.log('API Key 존재:', !!apiKey);\n    console.log('API Secret 존재:', !!apiSecret);\n    console.log('JWT 존재:', !!jwt);\n\n    // 저장된 API 키가 있는 경우\n    if (apiKey && apiSecret) {\n      console.log('저장된 API 키 사용');\n      return {\n        headers: {\n          pinata_api_key: apiKey,\n          pinata_secret_api_key: apiSecret\n        }\n      };\n    }\n\n    // JWT가 있는 경우\n    if (jwt) {\n      console.log('저장된 JWT 사용');\n      return {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      };\n    }\n\n    // 저장된 설정이 없는 경우 하드코딩된 API 키 사용\n    console.log('하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  } catch (error) {\n    console.error('Pinata 설정 가져오기 오류:', error);\n\n    // 오류 발생 시 하드코딩된 API 키 반환\n    console.log('오류 발생으로 하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  }\n};\n\n// Function to retrieve all stored metadata\nexport const getStoredMetadata = () => {\n  try {\n    const storedData = localStorage.getItem(METADATA_STORAGE_KEY);\n    if (!storedData) {\n      return [];\n    }\n    return JSON.parse(storedData);\n  } catch (error) {\n    console.error('Error retrieving stored metadata:', error);\n    return [];\n  }\n};\n\n// Function to save a new metadata item\nexport const saveStoredMetadata = metadata => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    existingMetadata.push(metadata);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(existingMetadata));\n  } catch (error) {\n    console.error('Error saving metadata:', error);\n    throw new Error('Failed to save metadata to local storage');\n  }\n};\n\n// Function to delete a metadata item by ID\nexport const deleteStoredMetadata = id => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    const updatedMetadata = existingMetadata.filter(item => item.id !== id);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(updatedMetadata));\n  } catch (error) {\n    console.error('Error deleting metadata:', error);\n    throw new Error('Failed to delete metadata from local storage');\n  }\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async file => {\n  try {\n    const config = getPinataConfig();\n    console.log('이미지 업로드 중... 설정:', config.headers);\n\n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n\n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n\n    // Make the API request\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\n      ...config,\n      maxBodyLength: Infinity,\n      // This is needed for large files\n      headers: {\n        ...config.headers,\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        // We can implement progress tracking here if needed\n        console.log(`Upload progress: ${Math.round(progressEvent.loaded * 100 / (progressEvent.total || 1))}%`);\n      }\n    });\n    console.log('Pinata 응답:', response.data);\n\n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error uploading to Pinata:', error);\n\n    // 오류 메시지 추출 및 명확한 에러 던지기\n    let errorMessage = getErrorMessage(error);\n\n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      if (statusCode === 401) {\n        errorMessage = 'Authentication failed. Please check your Pinata API keys or JWT token.';\n      } else if (statusCode === 429) {\n        errorMessage = 'Rate limit exceeded. Please try again later.';\n      } else if (responseData && responseData.error) {\n        errorMessage = responseData.error;\n      } else {\n        errorMessage = `Server error: ${statusCode}`;\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      errorMessage = 'No response from Pinata. Please check your internet connection.';\n    }\n    throw new Error(errorMessage);\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async metadata => {\n  try {\n    const config = getPinataConfig();\n    console.log('메타데이터 저장 중... 설정:', config.headers);\n\n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n\n    // Make the API request\n    const response = await axios.post('https://api.pinata.cloud/pinning/pinJSONToIPFS', data, config);\n    console.log('메타데이터 저장 응답:', response.data);\n\n    // If successful, return the IPFS URL and save to local storage\n    if (response.data && response.data.IpfsHash) {\n      const result = {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n\n      // Create a StoredMetadata object\n      const storedMetadata = {\n        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),\n        cid: response.data.IpfsHash,\n        url: result.url,\n        metadata: metadata,\n        createdAt: new Date().toISOString()\n      };\n\n      // Save to local storage\n      saveStoredMetadata(storedMetadata);\n      return result;\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error) {\n    console.error('Error storing metadata on Pinata:', error);\n\n    // 오류 메시지 추출 및 명확한 에러 던지기\n    let errorMessage = getErrorMessage(error);\n\n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      if (statusCode === 401) {\n        errorMessage = 'Authentication failed. Please check your Pinata API keys or JWT token.';\n      } else if (statusCode === 429) {\n        errorMessage = 'Rate limit exceeded. Please try again later.';\n      } else if (responseData && responseData.error) {\n        errorMessage = responseData.error;\n      } else {\n        errorMessage = `Server error: ${statusCode}`;\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      errorMessage = 'No response from Pinata. Please check your internet connection.';\n    }\n    throw new Error(errorMessage);\n  }\n};","map":{"version":3,"names":["axios","METADATA_STORAGE_KEY","FALLBACK_API_KEY","FALLBACK_API_SECRET","getErrorMessage","error","Error","message","String","JSON","stringify","e","getPinataConfig","apiKey","localStorage","getItem","apiSecret","jwt","console","log","headers","pinata_api_key","pinata_secret_api_key","Authorization","getStoredMetadata","storedData","parse","saveStoredMetadata","metadata","existingMetadata","push","setItem","deleteStoredMetadata","id","updatedMetadata","filter","item","uploadImageToPinata","file","config","formData","FormData","append","name","keyvalues","type","timestamp","Date","now","toString","pinataOptions","cidVersion","response","post","maxBodyLength","Infinity","onUploadProgress","progressEvent","Math","round","loaded","total","data","IpfsHash","url","ipfsHash","errorMessage","statusCode","status","responseData","request","storeMetadataToPinata","pinataMetadata","pinataContent","result","storedMetadata","crypto","randomUUID","cid","createdAt","toISOString"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/services/nft.ts"],"sourcesContent":["import axios from 'axios';\nimport { NFTMetadata, StoredMetadata } from '../types/nft';\n\n// Local storage key for metadata items\nconst METADATA_STORAGE_KEY = 'nft_stored_metadata';\n\n// 하드코딩된 API 키 (최후의 수단으로 사용)\nconst FALLBACK_API_KEY = \"4f5eb1e973348c67f7db\";\nconst FALLBACK_API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n\n// Helper function to extract error message from various error types\nconst getErrorMessage = (error: any): string => {\n  if (typeof error === 'string') return error;\n  if (error instanceof Error) return error.message;\n  if (error && typeof error === 'object') {\n    if ('message' in error) return String(error.message);\n    if ('error' in error) return String(error.error);\n    try {\n      return JSON.stringify(error); // Last resort - convert object to string\n    } catch (e) {\n      return \"Cannot display error details\";\n    }\n  }\n  return 'Unknown error occurred';\n};\n\n// Function to get the Pinata API configuration\nexport const getPinataConfig = () => {\n  try {\n    const apiKey = localStorage.getItem('pinataApiKey');\n    const apiSecret = localStorage.getItem('pinataApiSecret');\n    const jwt = localStorage.getItem('pinataJWT');\n\n    console.log('로컬스토리지에서 불러온 Pinata 설정:');\n    console.log('API Key 존재:', !!apiKey);\n    console.log('API Secret 존재:', !!apiSecret);\n    console.log('JWT 존재:', !!jwt);\n\n    // 저장된 API 키가 있는 경우\n    if (apiKey && apiSecret) {\n      console.log('저장된 API 키 사용');\n      return {\n        headers: {\n          pinata_api_key: apiKey,\n          pinata_secret_api_key: apiSecret\n        }\n      };\n    }\n    \n    // JWT가 있는 경우\n    if (jwt) {\n      console.log('저장된 JWT 사용');\n      return {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      };\n    }\n\n    // 저장된 설정이 없는 경우 하드코딩된 API 키 사용\n    console.log('하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  } catch (error) {\n    console.error('Pinata 설정 가져오기 오류:', error);\n    \n    // 오류 발생 시 하드코딩된 API 키 반환\n    console.log('오류 발생으로 하드코딩된 API 키 사용');\n    return {\n      headers: {\n        pinata_api_key: FALLBACK_API_KEY,\n        pinata_secret_api_key: FALLBACK_API_SECRET\n      }\n    };\n  }\n};\n\n// Function to retrieve all stored metadata\nexport const getStoredMetadata = (): StoredMetadata[] => {\n  try {\n    const storedData = localStorage.getItem(METADATA_STORAGE_KEY);\n    if (!storedData) {\n      return [];\n    }\n    \n    return JSON.parse(storedData) as StoredMetadata[];\n  } catch (error) {\n    console.error('Error retrieving stored metadata:', error);\n    return [];\n  }\n};\n\n// Function to save a new metadata item\nexport const saveStoredMetadata = (metadata: StoredMetadata): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    existingMetadata.push(metadata);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(existingMetadata));\n  } catch (error) {\n    console.error('Error saving metadata:', error);\n    throw new Error('Failed to save metadata to local storage');\n  }\n};\n\n// Function to delete a metadata item by ID\nexport const deleteStoredMetadata = (id: string): void => {\n  try {\n    const existingMetadata = getStoredMetadata();\n    const updatedMetadata = existingMetadata.filter(item => item.id !== id);\n    localStorage.setItem(METADATA_STORAGE_KEY, JSON.stringify(updatedMetadata));\n  } catch (error) {\n    console.error('Error deleting metadata:', error);\n    throw new Error('Failed to delete metadata from local storage');\n  }\n};\n\n// Function to upload an image to Pinata\nexport const uploadImageToPinata = async (file: File) => {\n  try {\n    const config = getPinataConfig();\n    console.log('이미지 업로드 중... 설정:', config.headers);\n    \n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Add metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        type: 'nft-image',\n        timestamp: Date.now().toString()\n      }\n    });\n    formData.append('pinataMetadata', metadata);\n    \n    // Add pinata options\n    const pinataOptions = JSON.stringify({\n      cidVersion: 1\n    });\n    formData.append('pinataOptions', pinataOptions);\n    \n    // Make the API request\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinFileToIPFS',\n      formData,\n      {\n        ...config,\n        maxBodyLength: Infinity, // This is needed for large files\n        headers: {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: (progressEvent) => {\n          // We can implement progress tracking here if needed\n          console.log(`Upload progress: ${Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1))}%`);\n        }\n      }\n    );\n    \n    console.log('Pinata 응답:', response.data);\n    \n    // If successful, return the IPFS URL\n    if (response.data && response.data.IpfsHash) {\n      return {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('Error uploading to Pinata:', error);\n    \n    // 오류 메시지 추출 및 명확한 에러 던지기\n    let errorMessage = getErrorMessage(error);\n    \n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      \n      if (statusCode === 401) {\n        errorMessage = 'Authentication failed. Please check your Pinata API keys or JWT token.';\n      } else if (statusCode === 429) {\n        errorMessage = 'Rate limit exceeded. Please try again later.';\n      } else if (responseData && responseData.error) {\n        errorMessage = responseData.error;\n      } else {\n        errorMessage = `Server error: ${statusCode}`;\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      errorMessage = 'No response from Pinata. Please check your internet connection.';\n    }\n    \n    throw new Error(errorMessage);\n  }\n};\n\n// Function to store metadata to Pinata\nexport const storeMetadataToPinata = async (metadata: NFTMetadata) => {\n  try {\n    const config = getPinataConfig();\n    console.log('메타데이터 저장 중... 설정:', config.headers);\n    \n    // Prepare the JSON to be pinned\n    const data = {\n      pinataOptions: {\n        cidVersion: 1\n      },\n      pinataMetadata: {\n        name: `${metadata.name}-metadata`,\n        keyvalues: {\n          type: 'nft-metadata',\n          timestamp: Date.now().toString()\n        }\n      },\n      pinataContent: metadata\n    };\n    \n    // Make the API request\n    const response = await axios.post(\n      'https://api.pinata.cloud/pinning/pinJSONToIPFS',\n      data,\n      config\n    );\n    \n    console.log('메타데이터 저장 응답:', response.data);\n    \n    // If successful, return the IPFS URL and save to local storage\n    if (response.data && response.data.IpfsHash) {\n      const result = {\n        url: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n        ipfsHash: response.data.IpfsHash\n      };\n      \n      // Create a StoredMetadata object\n      const storedMetadata: StoredMetadata = {\n        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),\n        cid: response.data.IpfsHash,\n        url: result.url,\n        metadata: metadata,\n        createdAt: new Date().toISOString()\n      };\n      \n      // Save to local storage\n      saveStoredMetadata(storedMetadata);\n      \n      return result;\n    } else {\n      throw new Error('Invalid response from Pinata');\n    }\n  } catch (error: any) {\n    console.error('Error storing metadata on Pinata:', error);\n    \n    // 오류 메시지 추출 및 명확한 에러 던지기\n    let errorMessage = getErrorMessage(error);\n    \n    // Enhanced error handling\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const statusCode = error.response.status;\n      const responseData = error.response.data;\n      \n      if (statusCode === 401) {\n        errorMessage = 'Authentication failed. Please check your Pinata API keys or JWT token.';\n      } else if (statusCode === 429) {\n        errorMessage = 'Rate limit exceeded. Please try again later.';\n      } else if (responseData && responseData.error) {\n        errorMessage = responseData.error;\n      } else {\n        errorMessage = `Server error: ${statusCode}`;\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      errorMessage = 'No response from Pinata. Please check your internet connection.';\n    }\n    \n    throw new Error(errorMessage);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}