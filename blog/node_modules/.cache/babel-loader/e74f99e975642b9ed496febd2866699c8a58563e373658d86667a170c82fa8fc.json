{"ast":null,"code":"// Direct metadata storage function that bypasses the service\nconst storeMetadataDirectly = async metadata => {\n  const API_KEY = \"4f5eb1e973348c67f7db\";\n  const API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n  console.log(\"Storing metadata directly:\", metadata);\n\n  // First test the auth\n  try {\n    const authTestResponse = await fetch('https://api.pinata.cloud/data/testAuthentication', {\n      method: 'GET',\n      headers: {\n        'pinata_api_key': API_KEY,\n        'pinata_secret_api_key': API_SECRET\n      }\n    });\n    if (!authTestResponse.ok) {\n      throw new Error(`Authentication failed: ${authTestResponse.status} ${authTestResponse.statusText}`);\n    }\n    const authData = await authTestResponse.json();\n    console.log(\"Authentication successful:\", authData);\n  } catch (error) {\n    console.error(\"Authentication test failed:\", error);\n    throw new Error(`Authentication error: ${error instanceof Error ? error.message : 'Unknown'}`);\n  }\n\n  // Prepare the JSON to be pinned\n  const data = {\n    pinataOptions: {\n      cidVersion: 1\n    },\n    pinataMetadata: {\n      name: `${metadata.name}-metadata`,\n      keyvalues: {\n        type: 'nft-metadata',\n        timestamp: Date.now().toString()\n      }\n    },\n    pinataContent: metadata\n  };\n\n  // Now try to store the metadata\n  const response = await fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'pinata_api_key': API_KEY,\n      'pinata_secret_api_key': API_SECRET\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Pinata error response:\", errorText);\n    if (response.status === 403) {\n      throw new Error(`Access denied (403): Your API key doesn't have permission to pin JSON to IPFS or has reached a limit.`);\n    }\n    throw new Error(`Pinata API error: ${response.status} ${response.statusText}`);\n  }\n  const result = await response.json();\n  console.log(\"Metadata stored successfully:\", result);\n  return {\n    url: `https://gateway.pinata.cloud/ipfs/${result.IpfsHash}`,\n    ipfsHash: result.IpfsHash\n  };\n};","map":{"version":3,"names":["storeMetadataDirectly","metadata","API_KEY","API_SECRET","console","log","authTestResponse","fetch","method","headers","ok","Error","status","statusText","authData","json","error","message","data","pinataOptions","cidVersion","pinataMetadata","name","keyvalues","type","timestamp","Date","now","toString","pinataContent","response","body","JSON","stringify","errorText","text","result","url","IpfsHash","ipfsHash"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataForm.tsx"],"sourcesContent":["// Direct metadata storage function that bypasses the service\nconst storeMetadataDirectly = async (metadata: NFTMetadata) => {\n  const API_KEY = \"4f5eb1e973348c67f7db\";\n  const API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n  \n  console.log(\"Storing metadata directly:\", metadata);\n  \n  // First test the auth\n  try {\n    const authTestResponse = await fetch('https://api.pinata.cloud/data/testAuthentication', {\n      method: 'GET',\n      headers: {\n        'pinata_api_key': API_KEY,\n        'pinata_secret_api_key': API_SECRET\n      }\n    });\n    \n    if (!authTestResponse.ok) {\n      throw new Error(`Authentication failed: ${authTestResponse.status} ${authTestResponse.statusText}`);\n    }\n    \n    const authData = await authTestResponse.json();\n    console.log(\"Authentication successful:\", authData);\n  } catch (error) {\n    console.error(\"Authentication test failed:\", error);\n    throw new Error(`Authentication error: ${error instanceof Error ? error.message : 'Unknown'}`);\n  }\n  \n  // Prepare the JSON to be pinned\n  const data = {\n    pinataOptions: {\n      cidVersion: 1\n    },\n    pinataMetadata: {\n      name: `${metadata.name}-metadata`,\n      keyvalues: {\n        type: 'nft-metadata',\n        timestamp: Date.now().toString()\n      }\n    },\n    pinataContent: metadata\n  };\n  \n  // Now try to store the metadata\n  const response = await fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'pinata_api_key': API_KEY,\n      'pinata_secret_api_key': API_SECRET\n    },\n    body: JSON.stringify(data)\n  });\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Pinata error response:\", errorText);\n    \n    if (response.status === 403) {\n      throw new Error(`Access denied (403): Your API key doesn't have permission to pin JSON to IPFS or has reached a limit.`);\n    }\n    \n    throw new Error(`Pinata API error: ${response.status} ${response.statusText}`);\n  }\n  \n  const result = await response.json();\n  console.log(\"Metadata stored successfully:\", result);\n  \n  return {\n    url: `https://gateway.pinata.cloud/ipfs/${result.IpfsHash}`,\n    ipfsHash: result.IpfsHash\n  };\n};"],"mappings":"AAAA;AACA,MAAMA,qBAAqB,GAAG,MAAOC,QAAqB,IAAK;EAC7D,MAAMC,OAAO,GAAG,sBAAsB;EACtC,MAAMC,UAAU,GAAG,kEAAkE;EAErFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,QAAQ,CAAC;;EAEnD;EACA,IAAI;IACF,MAAMK,gBAAgB,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;MACvFC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,gBAAgB,EAAEP,OAAO;QACzB,uBAAuB,EAAEC;MAC3B;IACF,CAAC,CAAC;IAEF,IAAI,CAACG,gBAAgB,CAACI,EAAE,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,0BAA0BL,gBAAgB,CAACM,MAAM,IAAIN,gBAAgB,CAACO,UAAU,EAAE,CAAC;IACrG;IAEA,MAAMC,QAAQ,GAAG,MAAMR,gBAAgB,CAACS,IAAI,CAAC,CAAC;IAC9CX,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAES,QAAQ,CAAC;EACrD,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAM,IAAIL,KAAK,CAAC,yBAAyBK,KAAK,YAAYL,KAAK,GAAGK,KAAK,CAACC,OAAO,GAAG,SAAS,EAAE,CAAC;EAChG;;EAEA;EACA,MAAMC,IAAI,GAAG;IACXC,aAAa,EAAE;MACbC,UAAU,EAAE;IACd,CAAC;IACDC,cAAc,EAAE;MACdC,IAAI,EAAE,GAAGrB,QAAQ,CAACqB,IAAI,WAAW;MACjCC,SAAS,EAAE;QACTC,IAAI,EAAE,cAAc;QACpBC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;MACjC;IACF,CAAC;IACDC,aAAa,EAAE5B;EACjB,CAAC;;EAED;EACA,MAAM6B,QAAQ,GAAG,MAAMvB,KAAK,CAAC,gDAAgD,EAAE;IAC7EC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAEP,OAAO;MACzB,uBAAuB,EAAEC;IAC3B,CAAC;IACD4B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACY,QAAQ,CAACpB,EAAE,EAAE;IAChB,MAAMwB,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvC/B,OAAO,CAACY,KAAK,CAAC,wBAAwB,EAAEkB,SAAS,CAAC;IAElD,IAAIJ,QAAQ,CAAClB,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAID,KAAK,CAAC,uGAAuG,CAAC;IAC1H;IAEA,MAAM,IAAIA,KAAK,CAAC,qBAAqBmB,QAAQ,CAAClB,MAAM,IAAIkB,QAAQ,CAACjB,UAAU,EAAE,CAAC;EAChF;EAEA,MAAMuB,MAAM,GAAG,MAAMN,QAAQ,CAACf,IAAI,CAAC,CAAC;EACpCX,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE+B,MAAM,CAAC;EAEpD,OAAO;IACLC,GAAG,EAAE,qCAAqCD,MAAM,CAACE,QAAQ,EAAE;IAC3DC,QAAQ,EAAEH,MAAM,CAACE;EACnB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}