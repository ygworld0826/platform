{"ast":null,"code":"// Notes management service\n\n// Interface for a note\n\n// Storage key for notes\nconst NOTES_STORAGE_KEY = 'platform_notes';\n\n// Get all notes\nexport const getAllNotes = () => {\n  try {\n    const notesData = localStorage.getItem(NOTES_STORAGE_KEY);\n    if (!notesData) return [];\n    return JSON.parse(notesData);\n  } catch (error) {\n    console.error('Error retrieving notes from localStorage:', error);\n    return [];\n  }\n};\n\n// Save all notes\nexport const saveAllNotes = notes => {\n  try {\n    localStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(notes));\n  } catch (error) {\n    console.error('Error saving notes to localStorage:', error);\n  }\n};\n\n// Get a specific note\nexport const getNote = (moduleId, lectureId) => {\n  const notes = getAllNotes();\n  return notes.find(note => note.moduleId === moduleId && note.lectureId === lectureId);\n};\n\n// Save or update a note\nexport const saveNote = (moduleId, lectureId, content) => {\n  const notes = getAllNotes();\n  const now = new Date().toISOString();\n\n  // Check if the note already exists\n  const existingNoteIndex = notes.findIndex(note => note.moduleId === moduleId && note.lectureId === lectureId);\n  if (existingNoteIndex >= 0) {\n    // Update existing note\n    const updatedNote = {\n      ...notes[existingNoteIndex],\n      content,\n      updatedAt: now\n    };\n    notes[existingNoteIndex] = updatedNote;\n    saveAllNotes(notes);\n    return updatedNote;\n  } else {\n    // Create a new note\n    const newNote = {\n      id: `${moduleId}_${lectureId}_${Date.now()}`,\n      moduleId,\n      lectureId,\n      content,\n      createdAt: now,\n      updatedAt: now\n    };\n    notes.push(newNote);\n    saveAllNotes(notes);\n    return newNote;\n  }\n};\n\n// Get all notes for a specific module\nexport const getNotesByModule = moduleId => {\n  const notes = getAllNotes();\n  return notes.filter(note => note.moduleId === moduleId);\n};\n\n// Delete a note\nexport const deleteNote = (moduleId, lectureId) => {\n  const notes = getAllNotes();\n  const filteredNotes = notes.filter(note => !(note.moduleId === moduleId && note.lectureId === lectureId));\n  saveAllNotes(filteredNotes);\n};\n\n// Export all notes as JSON\nexport const exportNotes = () => {\n  const notes = getAllNotes();\n  return JSON.stringify(notes, null, 2);\n};\n\n// Import notes from JSON\nexport const importNotes = jsonData => {\n  try {\n    const notes = JSON.parse(jsonData);\n    // Basic validation to ensure proper format\n    if (!Array.isArray(notes)) {\n      return false;\n    }\n    saveAllNotes(notes);\n    return true;\n  } catch (error) {\n    console.error('Error importing notes:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["NOTES_STORAGE_KEY","getAllNotes","notesData","localStorage","getItem","JSON","parse","error","console","saveAllNotes","notes","setItem","stringify","getNote","moduleId","lectureId","find","note","saveNote","content","now","Date","toISOString","existingNoteIndex","findIndex","updatedNote","updatedAt","newNote","id","createdAt","push","getNotesByModule","filter","deleteNote","filteredNotes","exportNotes","importNotes","jsonData","Array","isArray"],"sources":["/Users/sungwoocho/Desktop/platform/src/services/notes.ts"],"sourcesContent":["// Notes management service\n\n// Interface for a note\nexport interface Note {\n    id: string;\n    moduleId: string;\n    lectureId: string;\n    content: string;\n    createdAt: string;\n    updatedAt: string;\n  }\n  \n  // Storage key for notes\n  const NOTES_STORAGE_KEY = 'platform_notes';\n  \n  // Get all notes\n  export const getAllNotes = (): Note[] => {\n    try {\n      const notesData = localStorage.getItem(NOTES_STORAGE_KEY);\n      if (!notesData) return [];\n      return JSON.parse(notesData);\n    } catch (error) {\n      console.error('Error retrieving notes from localStorage:', error);\n      return [];\n    }\n  };\n  \n  // Save all notes\n  export const saveAllNotes = (notes: Note[]): void => {\n    try {\n      localStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(notes));\n    } catch (error) {\n      console.error('Error saving notes to localStorage:', error);\n    }\n  };\n  \n  // Get a specific note\n  export const getNote = (moduleId: string, lectureId: string): Note | undefined => {\n    const notes = getAllNotes();\n    return notes.find(note => note.moduleId === moduleId && note.lectureId === lectureId);\n  };\n  \n  // Save or update a note\n  export const saveNote = (moduleId: string, lectureId: string, content: string): Note => {\n    const notes = getAllNotes();\n    const now = new Date().toISOString();\n    \n    // Check if the note already exists\n    const existingNoteIndex = notes.findIndex(\n      note => note.moduleId === moduleId && note.lectureId === lectureId\n    );\n    \n    if (existingNoteIndex >= 0) {\n      // Update existing note\n      const updatedNote = {\n        ...notes[existingNoteIndex],\n        content,\n        updatedAt: now\n      };\n      \n      notes[existingNoteIndex] = updatedNote;\n      saveAllNotes(notes);\n      return updatedNote;\n    } else {\n      // Create a new note\n      const newNote: Note = {\n        id: `${moduleId}_${lectureId}_${Date.now()}`,\n        moduleId,\n        lectureId,\n        content,\n        createdAt: now,\n        updatedAt: now\n      };\n      \n      notes.push(newNote);\n      saveAllNotes(notes);\n      return newNote;\n    }\n  };\n  \n  // Get all notes for a specific module\n  export const getNotesByModule = (moduleId: string): Note[] => {\n    const notes = getAllNotes();\n    return notes.filter(note => note.moduleId === moduleId);\n  };\n  \n  // Delete a note\n  export const deleteNote = (moduleId: string, lectureId: string): void => {\n    const notes = getAllNotes();\n    const filteredNotes = notes.filter(\n      note => !(note.moduleId === moduleId && note.lectureId === lectureId)\n    );\n    saveAllNotes(filteredNotes);\n  };\n  \n  // Export all notes as JSON\n  export const exportNotes = (): string => {\n    const notes = getAllNotes();\n    return JSON.stringify(notes, null, 2);\n  };\n  \n  // Import notes from JSON\n  export const importNotes = (jsonData: string): boolean => {\n    try {\n      const notes = JSON.parse(jsonData) as Note[];\n      // Basic validation to ensure proper format\n      if (!Array.isArray(notes)) {\n        return false;\n      }\n      saveAllNotes(notes);\n      return true;\n    } catch (error) {\n      console.error('Error importing notes:', error);\n      return false;\n    }\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}