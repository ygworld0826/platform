{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Define the NFTMetadata type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Direct metadata storage function that bypasses the service\nconst storeMetadataDirectly = async metadata => {\n  const API_KEY = \"4f5eb1e973348c67f7db\";\n  const API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n  try {\n    // Convert metadata to JSON string\n    const metadataJSON = JSON.stringify(metadata);\n\n    // Create FormData and append the JSON file\n    const formData = new FormData();\n    const metadataBlob = new Blob([metadataJSON], {\n      type: 'application/json'\n    });\n    formData.append('file', metadataBlob, 'metadata.json');\n\n    // Pinata API endpoint for pinning\n    const url = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\n\n    // Make the API request\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'pinata_api_key': API_KEY,\n        'pinata_secret_api_key': API_SECRET\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} ${response.statusText}`);\n    }\n    const result = await response.json();\n\n    // Return the IPFS URI\n    return `ipfs://${result.IpfsHash}`;\n  } catch (error) {\n    console.error('Error uploading metadata to IPFS:', error);\n    throw error;\n  }\n};\nconst MetadataForm = ({\n  onMetadataStored\n}) => {\n  _s();\n  const [metadata, setMetadata] = useState({\n    name: '',\n    description: '',\n    image: '',\n    attributes: []\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Call the storeMetadataDirectly function and get the URI\n      const metadataUri = await storeMetadataDirectly(metadata);\n\n      // Call the callback with the returned URI\n      onMetadataStored(metadataUri);\n    } catch (error) {\n      // Handle error\n      console.error(\"Error storing metadata:\", error);\n    }\n  };\n\n  // Your form JSX here\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n        value: metadata.name,\n        onChange: e => setMetadata({\n          ...metadata,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n        value: metadata.description,\n        onChange: e => setMetadata({\n          ...metadata,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Image URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\",\n        value: metadata.image,\n        onChange: e => setMetadata({\n          ...metadata,\n          image: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\",\n      children: \"Store Metadata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(MetadataForm, \"clqJYB5mCET4V9iBCPE1Abt3nLE=\");\n_c = MetadataForm;\nexport default MetadataForm;\nvar _c;\n$RefreshReg$(_c, \"MetadataForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","storeMetadataDirectly","metadata","API_KEY","API_SECRET","metadataJSON","JSON","stringify","formData","FormData","metadataBlob","Blob","type","append","url","response","fetch","method","headers","body","ok","Error","status","statusText","result","json","IpfsHash","error","console","MetadataForm","onMetadataStored","_s","setMetadata","name","description","image","attributes","handleSubmit","e","preventDefault","metadataUri","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/sungwoocho/Desktop/platform/blog/src/components/MetadataForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\n// Define the NFTMetadata type\nexport interface NFTMetadata {\n  name: string;\n  description: string;\n  image: string;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>;\n  // Add other fields as needed\n}\n\n// Direct metadata storage function that bypasses the service\nconst storeMetadataDirectly = async (metadata: NFTMetadata): Promise<string> => {\n  const API_KEY = \"4f5eb1e973348c67f7db\";\n  const API_SECRET = \"76c752db760ae75231ea6e7c2729da9f9318c44671c46b292c64e5855c4d9884\";\n  \n  try {\n    // Convert metadata to JSON string\n    const metadataJSON = JSON.stringify(metadata);\n    \n    // Create FormData and append the JSON file\n    const formData = new FormData();\n    const metadataBlob = new Blob([metadataJSON], { type: 'application/json' });\n    formData.append('file', metadataBlob, 'metadata.json');\n    \n    // Pinata API endpoint for pinning\n    const url = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\n    \n    // Make the API request\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'pinata_api_key': API_KEY,\n        'pinata_secret_api_key': API_SECRET,\n      },\n      body: formData,\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    \n    // Return the IPFS URI\n    return `ipfs://${result.IpfsHash}`;\n  } catch (error) {\n    console.error('Error uploading metadata to IPFS:', error);\n    throw error;\n  }\n};\n\ninterface MetadataFormProps {\n  onMetadataStored: (uri: string) => void;\n}\n\nconst MetadataForm: React.FC<MetadataFormProps> = ({ onMetadataStored }) => {\n  const [metadata, setMetadata] = useState<NFTMetadata>({\n    name: '',\n    description: '',\n    image: '',\n    attributes: []\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      // Call the storeMetadataDirectly function and get the URI\n      const metadataUri = await storeMetadataDirectly(metadata);\n      \n      // Call the callback with the returned URI\n      onMetadataStored(metadataUri);\n      \n    } catch (error) {\n      // Handle error\n      console.error(\"Error storing metadata:\", error);\n    }\n  };\n\n  // Your form JSX here\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields */}\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700\">Name</label>\n        <input\n          type=\"text\"\n          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n          value={metadata.name}\n          onChange={(e) => setMetadata({...metadata, name: e.target.value})}\n        />\n      </div>\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700\">Description</label>\n        <textarea\n          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n          value={metadata.description}\n          onChange={(e) => setMetadata({...metadata, description: e.target.value})}\n        />\n      </div>\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700\">Image URL</label>\n        <input\n          type=\"text\"\n          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n          value={metadata.image}\n          onChange={(e) => setMetadata({...metadata, image: e.target.value})}\n        />\n      </div>\n      {/* Add attribute fields if needed */}\n      \n      <button\n        type=\"submit\"\n        className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n      >\n        Store Metadata\n      </button>\n    </form>\n  );\n};\n\nexport default MetadataForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}